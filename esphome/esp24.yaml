substitutions:
  devicename: esp24
  run_time: 1min
  sleep_time: 5min
  night_sleep_time: 365min
esphome:
  name: '${devicename}'
  platformio_options:
    board_upload.flash_size: 16MB
esp32:
  board: m5stack-core2
  framework:
    type: arduino
    version: 2.0.2
    platform_version: '4.3.0'
debug:
  update_interval: 60s
time:
  - platform: homeassistant
    id: ntp
logger:
  baud_rate: 0
  level: DEBUG
switch:
  - platform: restart
    name: '${devicename} Restart'
api:
  reboot_timeout: 2min
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: '${devicename}'
    password: !secret wifi_password
  domain: .tylephony.com
  power_save_mode: none
deep_sleep:
  run_duration: '${run_time}'
  sleep_duration: '${sleep_time}'
  id: deep_sleep_control
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW
font:
  - file: fonts/dripicons-weather.ttf
    id: font_icon_large
    size: 200
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j

    
button:
  - platform: restart
    name: '${devicename} Restart'
    internal: false
  - platform: template
    name: '${devicename} Refresh'
    icon: 'mdi:update'
    on_press:
      then:
        - component.update: '${devicename}_display'
    internal: false
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: '${devicename} Button 1'
  - platform: gpio
    pin:
      number: GPIO34
      inverted: true
    name: '${devicename} Button 2'
    internal: false
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: '${devicename} Button 3'
    internal: false
  - platform: homeassistant
    id: '${devicename}_prevent_deep_sleep'
    name: '${devicename} Prevent Deep Sleep'
    entity_id: 'input_boolean.${devicename}_prevent_deep_sleep'

external_components:
  - source: 'github://ashald/esphome@lilygo-t5-47'
    components:
      - lilygo_t5_47
    refresh: 0s

display:
  platform: lilygo_t5_47
  full_update_every: 1
  rotation: 0
  cycles_render: 40
  cycles_invert: 40
  id: '${devicename}_display'
  update_interval: never

  lambda: |-

    // Images



    if (id(${devicename}_random).state == 0) {

    it.image(0, 0, id(image_0));
    
    }

    if (id(${devicename}_random).state == 1) {

    it.image(0, 0, id(image_1));
    
    }

    if (id(${devicename}_random).state == 2) {

    it.image(0, 0, id(image_2));
    
    }

    if (id(${devicename}_random).state == 3) {

    it.image(0, 0, id(image_3));
    
    }

    if (id(${devicename}_random).state == 4) {

    it.image(0, 0, id(image_4));
    
    }

    if (id(${devicename}_random).state == 5) {

    it.image(0, 0, id(image_5));
    
    }
sensor:
  - platform: wifi_signal
    name: '${devicename} WiFi Signal'
    id: '${devicename}_WiFi_Signal'
    update_interval: 60s
  - platform: uptime
    name: '${devicename} Uptime'
    update_interval: 60s
  - platform: debug
    free:
      name: '${devicename} Heap Free'
    block:
      name: '${devicename} Heap Max Block'
    loop_time:
      name: '${devicename} Loop Time'
  - id: '${devicename}_battery_voltage'
    name: '${devicename} Battery Voltage'
    platform: lilygo_t5_47
    unit_of_measurement: V
    state_class: measurement
    device_class: voltage
    update_interval: 60s
#  - platform: template
#    name: '${devicename} Random Numbers'
#    id: '${devicename}_random_sensor'
#    lambda: return rand() % 6;
#    update_interval: 5s
  - platform: homeassistant
    entity_id: sensor.${devicename}_random
    id: ${devicename}_random
    on_value:
      then:
        - logger.log: Received sensor.${devicename}_random
        - script.execute: random_number_generated
text_sensor:
  - platform: debug
    device:
      name: '${devicename} Device Info'
      id: '${devicename}_device_info'
script:
  - id: random_number_generated
    then:
      - component.update: '${devicename}_display'
      - delay: 1s
      - if:
          condition:
            binary_sensor.is_on: '${devicename}_prevent_deep_sleep'
          then:
            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - script.execute: enter_sleep
  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - logger.log: 'Nighttime, entering long sleep for ${night_sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${night_sleep_time}'
          else:
            - logger.log: 'Daytime, entering short sleep for ${sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${sleep_time}'
image:
  - file: images/Message - What The Fuck Are You Waiting For.png
    id: image_0
    type: TRANSPARENT_BINARY
  - file: images/Message - It's Okay To Be Sad Or Mad But Do Something About It.png
    id: image_1
    type: TRANSPARENT_BINARY
  - file: images/Message - Telling Someone I Miss You.png
    id: image_2
    type: TRANSPARENT_BINARY
  - file: images/Message - If Your Life Is A Mess.png
    id: image_3
    type: TRANSPARENT_BINARY
  - file: images/Message - The Way They Leave Tells You Everything.png
    id: image_4
    type: TRANSPARENT_BINARY
  - file: images/Message - If They Are Stupid Enough to Walk Away, Be Smart Enough to Let Them Go.png
    id: image_5
    type: TRANSPARENT_BINARY