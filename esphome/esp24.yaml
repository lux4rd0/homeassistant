substitutions:
  devicename: esp24
  run_time: 1min
  sleep_time: 5min
  night_sleep_time: 365min
esphome:
  name: '${devicename}'
  platformio_options:
    board_upload.flash_size: 16MB
  comment: SparkleLux Quotes
esp32:
  board: m5stack-core2
  framework:
    type: arduino
    version: 2.0.2
    platform_version: 4.3.0
time:
  - platform: homeassistant
    id: ntp
logger:
  baud_rate: 0
  level: DEBUG
switch:
  - platform: restart
    name: '${devicename} Restart'
api:
  reboot_timeout: 2min
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: '${devicename}'
    password: !secret wifi_password
  domain: .tylephony.com
  power_save_mode: none
deep_sleep:
  run_duration: '${run_time}'
  sleep_duration: '${sleep_time}'
  id: deep_sleep_control
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW
font:
  - file: fonts/dripicons-weather.ttf
    id: font_icon_large
    size: 200
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
button:
  - platform: restart
    name: '${devicename} Restart'
    internal: false
  - platform: template
    name: '${devicename} Refresh'
    icon: 'mdi:update'
    on_press:
      then:
        - component.update: '${devicename}_display'
    internal: false
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: '${devicename} Button 1'
  - platform: gpio
    pin:
      number: GPIO34
      inverted: true
    name: '${devicename} Button 2'
    internal: false
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: '${devicename} Button 3'
    internal: false
  - platform: homeassistant
    id: '${devicename}_prevent_deep_sleep'
    name: '${devicename} Prevent Deep Sleep'
    entity_id: 'input_boolean.${devicename}_prevent_deep_sleep'
    on_state:
      then:
        - script.execute: refresh_display
external_components:
  - source: custom_components
    components:
      - lilygo_t5_47
    refresh: 0s
display:
  platform: lilygo_t5_47
  full_update_every: 1
  cycles_render: 40
  cycles_invert: 40
  id: '${devicename}_display'
  update_interval: never
  lambda: >-

    // Static variable to store the last chosen image index

    static int last_image_index = -1; 

    // Define an array of image pointers

    esphome::image::Image* images[4] = {id(image_0), id(image_1), id(image_2),
    id(image_3)};

    int image_index;

    do {
      // Generate a random number between 0 and 3
      image_index = random(0, 4);
    } while (image_index == last_image_index); // Repeat if the new index is the
    same as the last

    // Update the last image index

    last_image_index = image_index;

    // Display the randomly chosen image

    it.image(0, 0, images[image_index]);
sensor:
  - platform: wifi_signal
    name: '${devicename} WiFi Signal'
    id: '${devicename}_WiFi_Signal'
    update_interval: 10s
  - platform: uptime
    name: '${devicename} Uptime'
    update_interval: 10s
  - id: '${devicename}_battery_voltage'
    name: '${devicename} Battery Voltage'
    platform: lilygo_t5_47
    unit_of_measurement: V
    state_class: measurement
    device_class: voltage
    update_interval: 10s

script:
  - id: refresh_display
    then:
      - component.update: '${devicename}_display'
      - if:
          condition:
            binary_sensor.is_on: '${devicename}_prevent_deep_sleep'
          then:
            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - script.execute: enter_sleep

  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(ntp).now();
              // Check if time is valid
              return time.is_valid();
          then:
            - if:
                condition:
                  lambda: |-
                    return id(ntp).now().hour < 6; 
                then:
                  - logger.log: 'Nighttime, entering long sleep for ${night_sleep_time}'
                  - deep_sleep.enter:
                      id: deep_sleep_control
                      sleep_duration: '${night_sleep_time}'
                else:
                  - logger.log: 'Daytime, entering short sleep for ${sleep_time}'
                  - deep_sleep.enter:
                      id: deep_sleep_control
                      sleep_duration: '${sleep_time}'
          else:
            - logger.log: 'Time not valid, not entering sleep'

image:
  - file: images/Message - Right Motion.png
    id: image_0
    type: TRANSPARENT_BINARY
  - file: images/Message - Stiff Muscle.png
    id: image_1
    type: TRANSPARENT_BINARY
  - file: images/Message - Hold On.png
    id: image_2
    type: TRANSPARENT_BINARY
  - file: images/Message - Do a long one.png
    id: image_3
    type: TRANSPARENT_BINARY
