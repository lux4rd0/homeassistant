esphome:
  name: hass-esp12
  platform: ESP32
  board: featheresp32

  on_boot:
      - output.turn_off: onboard_led

external_components:
  - source:
      type: git
      url: https://github.com/parats15/esphome.git
      ref: waveshare-color
    components: [ waveshare_epaper ]

color:
  - id: COLOR_RED
    red: 100%
    green: 0%
    blue: 0%
    white: 0%

time:
  - platform: homeassistant
    id: esptime

# Enable logging
logger:
  baud_rate: 0
#  level: VERY_VERBOSE

switch:
  - platform: restart
    name: "esp12 Restart"

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

font:
  - file: "fonts/Ldfcomicsans-jj7l.ttf"
    id: font_cs
    size: 28
  - file: "fonts/ArialTh.ttf"
    id: font_arth
    size: 20
  - file: "fonts/Black Gladiator.ttf"
    id: font_black_gladiator
    size: 70
  - file: "fonts/planet benson 2.ttf"
    id: font_planet_benson_2
    size: 32


  - file: 'fonts/Google Sans Bold.ttf'
    id: clock_font
    size: 20
    glyphs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ':', A, M, P, ' ']

  - file: 'fonts/Google Sans Medium.ttf'
    id: temp_font
    size: 32
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']
  - file: 'fonts/Google Sans Bold.ttf'
    id: status_font
    size: 12
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_small
    size: 22
    glyphs: [
      '󰌪', # mdi-leaf
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: icon_font_new
    size: 32
    glyphs: [
      '󰽔', # mdi-home-thermometer
      '󰧿', # mdi-lighthouse
      '󰟑', # home-automation
      '󰂒',  # beach
      '󰓣', # swim
      "󰽕", # mdi-home-thermometer-outline
      '󰕊', # umbrella
      # Sun
      "󰖛", # mdi-weather-sunset-down
      "󰖜", # mdi-weather-sunset-up
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: wifi_font
    size: 22
    glyphs: [
      # Wifi
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      '󰤫', # mdi-wifi-strength-alert-outline
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: weather_font
    size: 50
    glyphs: [
      # Weather
      "󰖙", # mdi-weather-sunny
      "󰖔", # mdi-weather-night
      "󰖐", # mdi-weather-cloudy
      "󰖖", # mdi-weather-pouring
      "󰼵", # mdi-weather-snowy-rainy
      "󰼴", # mdi-weather-snowy-heavy
      "󰖞", # mdi-weather-windy-variant
      "󰖑", # mdi-weather-fog
      "󰼱", # mdi-weather-night-partly-cloudy
      "󰖕", # mdi-weather-partly-cloudy
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: moon_font
    size: 50
    glyphs: [
      # Moon
      "󰽡", # first_quarter
      "󰽢", # full_moon
      "󰽣", # last_quarter
      "󰽤", # new_moon
      "󰽥", # waning_crescent
      "󰽦", # waning_gibbous
      "󰽧", # waxing_crescent
      "󰽨", # waxing_gibbous
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: battery_font
    size: 22
    glyphs: [
      # Battery
      '󰁹', # mdi-battery
      '󰂁', # mdi-battery-80
      '󰁿', # mdi-battery-60
      '󰁽', # mdi-battery-40
      '󰁻', # mdi-battery-20
      '󱃍', # mdi-battery-alert-variant-outline
      ]

  - file: 'fonts/digital-7.ttf' 
    id: lcd_font
    size: 32

  - file: 'fonts/Montserrat-Medium.ttf' 
    id: font_montserrat_medium
    size: 40

  - file: 'fonts/CrimsonText-Semibold.ttf' 
    id: font_crimsonText_semibold
    size: 40

  - file: 'fonts/Oswald-Medium.ttf' 
    id: font_oswald_medium
    size: 40

  - file: 'fonts/Kalam-Regular.ttf' 
    id: font_kalam_regular_80
    size: 80

  - file: 'fonts/Kalam-Regular.ttf' 
    id: font_kalam_regular_30
    size: 30


  - file: 'fonts/Kalam-Regular.ttf' 
    id: font_kalam_regular_20
    size: 20

  - file: 'fonts/Quicksand-Regular.ttf' 
    id: font_quicksand_regular_20
    size: 20

  - file: 'fonts/futura light bt.ttf' 
    id: font_futura_light_bt_20
    size: 20
    
  - file: 'fonts/Rebeqa-Thin.ttf' 
    id: font_rebeqa_thin_30
    size: 30

  - file: 'fonts/Ignotum.ttf' 
    id: font_ignotum_20
    size: 20


spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15

display:
  - platform: waveshare_epaper
    id: esp12_epaper
    cs_pin: GPIO12
    busy_pin: GPIO33
    reset_pin: GPIO21
    dc_pin: GPIO27
    model: 4.20in
    update_interval: 60s
    
    lambda: |-

      int x, y, c;
      ESP_LOGI("display", "Updating..");

      // Print time in HH:MM format
      it.strftime(0, 302, id(status_font), TextAlign::BOTTOM_LEFT, "%I:%M %p", id(esptime).now());


      it.print(75, 10, id(font_ignotum_20), TextAlign::CENTER, "Bedroom Dave");
      it.print(75, 30, id(font_ignotum_20), TextAlign::CENTER, "Bathroom");

      it.print(200, 10, id(font_ignotum_20), TextAlign::CENTER, "Bedroom Red");
      it.print(200, 30, id(font_ignotum_20), TextAlign::CENTER, "Bathroom");

      it.print(325, 10, id(font_ignotum_20), TextAlign::CENTER, "Hallway");
      it.print(325, 30, id(font_ignotum_20), TextAlign::CENTER, "Bathroom");


      it.printf(75, 80, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(bedroom_dave_bathroom_temperature).state);
      it.printf(200, 80, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(bedroom_red_bathroom_temperature).state);
      it.printf(325, 80, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(hallway_bathroom_temperature).state);
      
      it.printf(75, 120, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(bedroom_dave_bathroom_humidity).state);
      it.printf(200, 120, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(bedroom_red_bathroom_humidity).state);
      it.printf(325, 120, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(hallway_bathroom_humidity).state);





      it.print(75, 160, id(font_ignotum_20), TextAlign::CENTER, "Tyle 1st Floor");
      it.print(75, 180, id(font_ignotum_20), TextAlign::CENTER, "Thermostat");

      it.print(200, 160, id(font_ignotum_20), TextAlign::CENTER, "Tyle 2nd Floor");
      it.print(200, 180, id(font_ignotum_20), TextAlign::CENTER, "Thermostat");

      it.print(325, 170, id(font_ignotum_20), TextAlign::CENTER, "Outside");


      it.printf(75, 230, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(tyle_1st_floor_thermostat_temperature).state);
      it.printf(200, 230, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(tyle_2nd_floor_thermostat_temperature).state);
      it.printf(325, 230, id(font_kalam_regular_80), TextAlign::CENTER, "%.0f°", id(outside_temperature).state);
      
      it.printf(75, 270, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(tyle_1st_floor_thermostat_humidity).state);
      it.printf(200, 270, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(tyle_2nd_floor_thermostat_humidity).state);
      it.printf(325, 270, id(font_kalam_regular_30), TextAlign::CENTER, "%.0f%%", id(outside_humidity).state);







      // WiFi Signal Strength
      if(id(esp12_WiFi_Signal).has_state()) {
        x = 398, y = 298;
        if (id(esp12_WiFi_Signal).state >= -50) {
            //Excellent
            it.print(x, y, id(wifi_font), TextAlign::BOTTOM_RIGHT, "󰤨");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(esp12_WiFi_Signal).state  >= -60) {
            //Good
            it.print(x, y, id(wifi_font), TextAlign::BOTTOM_RIGHT, "󰤥");
            ESP_LOGI("WiFi", "Good");
        } else if (id(esp12_WiFi_Signal).state  >= -67) {
            //Fair
            it.print(x, y, id(wifi_font), TextAlign::BOTTOM_RIGHT, "󰤢");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(esp12_WiFi_Signal).state  >= -70) {
            //Weak
            it.print(x, y, id(wifi_font), TextAlign::BOTTOM_RIGHT, "󰤟");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(wifi_font), TextAlign::BOTTOM_RIGHT, "󰤫");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }

      // Voltage
      if(id(hass_esp12_battery_voltage).has_state()) {
        x = 398, y = 273;

        if (id(hass_esp12_battery_voltage).state >= 3.7) {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󰁹");
        } else if (id(hass_esp12_battery_voltage).state >= 3.5) {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󰂁");
        } else if (id(hass_esp12_battery_voltage).state >= 3.3) {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󰁿");
        } else if (id(hass_esp12_battery_voltage).state >= 3.1) {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󰁽");
        } else if (id(hass_esp12_battery_voltage).state >= 3.0) {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󰁻");
        } else {
        it.print(x, y, id(battery_font), TextAlign::BOTTOM_RIGHT, "󱃍");
        }

        // x = 35, y = 280;
        // it.printf(x, y, id(status_font), TextAlign::BOTTOM_LEFT, "%.2f V", id(hass_esp12_battery_voltage).state);
        }

#graph:
  # Show bare-minimum auto-ranged graph
#  - id: esp01_temperature_graph
#    sensor: esp01_temperature
#    duration: 24h
#    width: 200
#    height: 100

#  - id: esp12_WiFi_Signal_graph
#    sensor: esp12_WiFi_Signal
#    duration: 1h
#    width: 200
#    height: 50

sensor:

  - platform: wifi_signal
    name: "esp12 WiFi Signal"
    id: esp12_WiFi_Signal
    update_interval: 60s
    
  - platform: uptime
    name: "esp12 Uptime"
    update_interval: 60s

## Pull Home Assistant Sensor Data

## Humidity
  
  - platform: homeassistant
    entity_id: sensor.bedroom_dave_bathroom_humidity
    id: bedroom_dave_bathroom_humidity
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.bedroom_red_bathroom_humidity
    id: bedroom_red_bathroom_humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.hallway_bathroom_humidity
    id: hallway_bathroom_humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.outside_humidity
    id: outside_humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.tyle_1st_floor_thermostat_humidity
    id: tyle_1st_floor_thermostat_humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.tyle_2nd_floor_thermostat_humidity
    id: tyle_2nd_floor_thermostat_humidity
    internal: true


## Temperature
  
  - platform: homeassistant
    entity_id: sensor.bedroom_dave_bathroom_temperature
    id: bedroom_dave_bathroom_temperature
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.bedroom_red_bathroom_temperature
    id: bedroom_red_bathroom_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.hallway_bathroom_temperature
    id: hallway_bathroom_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.outside_temperature
    id: outside_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.tyle_1st_floor_thermostat_temperature
    id: tyle_1st_floor_thermostat_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.tyle_2nd_floor_thermostat_temperature
    id: tyle_2nd_floor_thermostat_temperature
    internal: true


# Documentation: https://esphome.io/components/sensor/adc.html
  - platform: adc

  # https://learn.adafruit.com/adafruit-huzzah32-esp32-feather/power-management
    pin: A13

    name: "hass-esp12 Battery Voltage"
    id: hass_esp12_battery_voltage

    update_interval: 15s

  # See https://murt.is/articles/2021-02/huzzah32-battery-monitoring-esphome.md
    attenuation: 11db

  # Calculation based on https://cuddletech.com/?p=1030, modified to account for
  # ESPHome's internal math
  # (https://github.com/esphome/esphome/blob/410fad3b41640b76c7f902fb4656d0b1c2598681/esphome/components/adc/adc_sensor.cpp#L59).
  # (x / 3.9) should be the adc measurement converted to Volts.
    filters:
      - lambda: return (x / 3.9) * 2 * 3.3 * 1.1;

output:
  - platform: gpio
    id: onboard_led
    pin:
      number: 2
      inverted: False

light:
  - platform: binary
    name: "Onboard LED"
    output: onboard_led
