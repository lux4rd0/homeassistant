substitutions:
  devicename: esp21
  run_time: 2min
  sleep_time: 15min
  night_sleep_time: 365min
  room_1_name: MAIN BEDROOM
  room_1_temperature_id: bedroom_dave_bathroom_humidity_temperature
  room_1_humidity_id: bedroom_dave_bathroom_humidity_humidity
  room_2_name: BEDROOM 1
  room_2_temperature_id: bedroom_red_bathroom_humidity_temperature
  room_2_humidity_id: bedroom_red_bathroom_humidity_humidity
  room_3_name: BEDROOM 2
  room_3_temperature_id: hallway_bathroom_motion_temperature
  room_3_humidity_id: hallway_bathroom_humidity_humidity
  room_4_name: FAMILY ROOM
  room_4_temperature_id: esp01_temperature
  room_4_humidity_id: esp01_humidity
  room_5_name: SUNROOM
  room_5_temperature_id: esp08_temperature
  room_5_humidity_id: esp08_humidity
  room_6_name: LOFT
  room_6_temperature_id: outside_humidity_temperature
  room_6_humidity_id: outside_humidity_humidity
  room_7_name: KITCHEN
  room_7_temperature_id: tyle_1st_floor_thermostat_temperature
  room_7_humidity_id: tyle_1st_floor_thermostat_humidity
  room_8_name: BARN
  room_8_temperature_id: tyle_2nd_floor_thermostat_temperature
  room_8_humidity_id: tyle_2nd_floor_thermostat_humidity
  room_9_name: SHE SHED
  room_9_temperature_id: weatherflow_air_temperature
  room_9_humidity_id: weatherflow_relative_humidity
esphome:
  name: '${devicename}'
  platformio_options:
    board_upload.flash_size: 16MB
esp32:
  board: m5stack-core2
  framework:
    type: arduino
    version: 2.0.2
    platform_version: '4.3.0'
debug:
  update_interval: 60s
time:
  - platform: homeassistant
    id: ntp
logger:
  baud_rate: 0
  level: DEBUG
switch:
  - platform: restart
    name: '${devicename} Restart'
api:
  reboot_timeout: 2min
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: '${devicename}'
    password: !secret wifi_password
  domain: .tylephony.com
  power_save_mode: none
deep_sleep:
  run_duration: '${run_time}'
  sleep_duration: '${sleep_time}'
  id: deep_sleep_control
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW
font:
  - file: fonts/dripicons-weather.ttf
    id: font_icon_large_a
    size: 210
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/dripicons-weather.ttf
    id: font_icon_small_a
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
    size: 38
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_battery_a
    size: 32
    glyphs:
      - "\U000F0079"
      - "\U000F0081"
      - "\U000F007F"
      - "\U000F007D"
      - "\U000F007B"
      - "\U000F10CD"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi_a
    size: 32
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"
  - file: fonts/Calama.ttf
    id: font_room_name_a
    size: 40
  - file: fonts/digital-7 (mono).ttf
    id: font_humidity_a
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
      - ' '
    size: 64
  - file: fonts/digital-7 (mono).ttf
    id: font_current_a
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
      - ' '
    size: 82
  - file: 'gfonts://Alef'
    id: font_humidity_percent_a
    glyphs:
      - '%'
    size: 36
  - file: 'gfonts://Alef'
    id: font_current_humidity_percent_a
    glyphs:
      - '%'
    size: 40
  - file: fonts/digital-7 (mono).ttf
    id: font_temperature_a
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
    size: 136
  - file: 'gfonts://Alef'
    id: font_temperature_degree_a
    size: 80
    glyphs:
      - °
  - file: 'gfonts://Alef'
    id: font_hourly_degree_a
    size: 30
    glyphs:
      - °
  - file: 'gfonts://Alef'
    id: font_current_degree_a
    size: 70
    glyphs:
      - °
  - file: fonts/digital-7 (mono).ttf
    id: font_hourly_a
    size: 30
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
  - file: fonts/Calama.ttf
    id: font_lettering_a
    size: 40
    glyphs:
      - A
      - C
      - E
      - G
      - H
      - I
      - L
      - 'N'
      - O
      - R
      - T
      - U
      - W
      - 'Y'
  - file: fonts/pie4map.ttf
    id: font_pie_a
    size: 32
  - file: fonts/Calama.ttf
    id: font_last_updated_a
    size: 46
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - ':'
      - A
      - M
      - P
      - ' '
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_clock_a
    size: 34
    glyphs:
      - "\U000F144B"
      - "\U000F144C"
      - "\U000F144D"
      - "\U000F144E"
      - "\U000F144F"
      - "\U000F1450"
      - "\U000F1451"
      - "\U000F1452"
      - "\U000F1453"
      - "\U000F1454"
      - "\U000F1455"
      - "\U000F1456"
      - "\U000F143F"
      - "\U000F1440"
      - "\U000F1441"
      - "\U000F1442"
      - "\U000F1443"
      - "\U000F1444"
      - "\U000F1445"
      - "\U000F1446"
      - "\U000F1447"
      - "\U000F1448"
      - "\U000F1449"
      - "\U000F144A"
  - file: fonts/Calama.ttf
    id: font_day_b
    size: 96
    glyphs:
      - A
      - D
      - E
      - F
      - H
      - I
      - M
      - 'N'
      - O
      - R
      - S
      - T
      - U
      - W
  - file: fonts/Calama.ttf
    id: font_date_b
    size: 60
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - /
  - file: fonts/Calama.ttf
    id: font_hi_lo_words_b
    size: 60
    glyphs:
      - H
      - I
      - L
      - O
  - file: fonts/Calama.ttf
    id: font_last_updated_b
    size: 46
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - ':'
      - A
      - M
      - P
      - ' '
  - file: fonts/digital-7 (mono).ttf
    id: font_hi_lo_temperature_b
    size: 110
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
  - file: fonts/digital-7 (mono).ttf
    id: font_current_temperature_b
    size: 240
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
  - file: fonts/Google Sans Bold.ttf
    id: font_current_degree_b
    size: 150
    glyphs:
      - °
  - file: fonts/Google Sans Bold.ttf
    id: font_hi_lo_degree_b
    size: 70
    glyphs:
      - °
  - file: fonts/dripicons-weather.ttf
    id: font_icon_large_b
    size: 330
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/dripicons-weather.ttf
    id: font_icon_small_b
    size: 165
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_battery_b
    size: 32
    glyphs:
      - "\U000F0079"
      - "\U000F0081"
      - "\U000F007F"
      - "\U000F007D"
      - "\U000F007B"
      - "\U000F10CD"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi_b
    size: 32
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_battery_c
    size: 20
    glyphs:
      - "\U000F0079"
      - "\U000F0081"
      - "\U000F007F"
      - "\U000F007D"
      - "\U000F007B"
      - "\U000F10CD"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi_c
    size: 20
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"
  - file: fonts/digital-7 (mono).ttf
    id: font_humidity_c
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
      - ' '
    size: 50
  - file: 'gfonts://Alef'
    id: font_humidity_percent_c
    glyphs:
      - '%'
    size: 36
  - file: 'gfonts://Alef'
    id: font_hourly_degree_c
    glyphs:
      - °
    size: 40
  - file: fonts/digital-7 (mono).ttf
    id: font_hourly_c
    size: 50
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
  - file: fonts/Calama.ttf
    id: font_lettering_c
    size: 32
  - file: fonts/dripicons-weather.ttf
    id: font_icon_small_c
    size: 70
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/dripicons-weather.ttf
    id: font_icon_large_c
    size: 160
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/digital-7 (mono).ttf
    id: font_current_c
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
      - ' '
    size: 100
  - file: 'gfonts://Alef'
    id: font_current_humidity_percent_c
    glyphs:
      - '%'
    size: 66
  - file: 'gfonts://Alef'
    id: font_current_degree_c
    size: 80
    glyphs:
      - °
button:
  - platform: restart
    name: '${devicename} Restart'
    internal: false
  - platform: template
    name: '${devicename} Refresh'
    icon: 'mdi:update'
    on_press:
      then:
        - component.update: '${devicename}_display'
    internal: false
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: '${devicename} Button 1'
  - platform: gpio
    pin:
      number: GPIO34
      inverted: true
    name: '${devicename} Button 2'
    internal: false
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: '${devicename} Button 3'
    internal: false
  - platform: homeassistant
    id: '${devicename}_prevent_deep_sleep'
    name: '${devicename} Prevent Deep Sleep'
    entity_id: 'input_boolean.${devicename}_prevent_deep_sleep'
external_components:
  - source: 'github://ashald/esphome@lilygo-t5-47'
    components:
      - lilygo_t5_47
    refresh: 0s
  - source: github://pr#3577
    components: wifi
    refresh: 0s
display:
  platform: lilygo_t5_47
  full_update_every: 1
  cycles_render: 40
  cycles_invert: 40
  id: '${devicename}_display'
  update_interval: never

  lambda: |-

      if (id(${devicename}_page).state == "A") {

      // Last Updated
      it.strftime(955, 5, id(font_last_updated_a), TextAlign::TOP_RIGHT, "%I:%M %p", id(ntp).now());
      
      int wifi_x_a = 925;
      int wifi_y_a = 40;
      
      // WiFi Signal Strength
      
      if (id(${devicename}_WiFi_Signal).has_state()) {
        if (id(${devicename}_WiFi_Signal).state >= -50) {
          //Excellent
          it.print(wifi_x_a, wifi_y_a, id(font_wifi_a), TextAlign::TOP_RIGHT, "󰤨");
          ESP_LOGI("WiFi", "Exellent");
        } else if (id(${devicename}_WiFi_Signal).state >= -60) {
          //Good
          it.print(wifi_x_a, wifi_y_a, id(font_wifi_a), TextAlign::TOP_RIGHT, "󰤥");
          ESP_LOGI("WiFi", "Good");
        } else if (id(${devicename}_WiFi_Signal).state >= -67) {
          //Fair
          it.print(wifi_x_a, wifi_y_a, id(font_wifi_a), TextAlign::TOP_RIGHT, "󰤢");
          ESP_LOGI("WiFi", "Fair");
        } else if (id(${devicename}_WiFi_Signal).state >= -70) {
          //Weak
          it.print(wifi_x_a, wifi_y_a, id(font_wifi_a), TextAlign::TOP_RIGHT, "󰤟");
          ESP_LOGI("WiFi", "Weak");
        } else {
          //Unlikely working signal
          it.print(wifi_x_a, wifi_y_a, id(font_wifi_a), TextAlign::TOP_RIGHT, "󰤫");
          ESP_LOGI("WiFi", "Unlikely");
        }
      }

      int battery_voltage_x = 955;
      int battery_voltage_y = 40;

      // Battery Voltage
      
      if (id(${devicename}_battery_voltage).has_state()) {
        if (id(${devicename}_battery_voltage).state >= 3.7) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󰁹");
        } else if (id(${devicename}_battery_voltage).state >= 3.5) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󰂁");
        } else if (id(${devicename}_battery_voltage).state >= 3.3) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󰁿");
        } else if (id(${devicename}_battery_voltage).state >= 3.1) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󰁽");
        } else if (id(${devicename}_battery_voltage).state >= 3.0) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󰁻");
        } else {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_a), TextAlign::TOP_RIGHT, "󱃍");
        }

      }

        // Rooms

        int room_x_pad = 151;
        int room_y_pad = 182;

        int room_name_x_center = 220;
        int room_name_y = 0;

        int room_temp_x_center = 220;
        int room_temp_y = 25;

        int room_temp_degree_x_center = 294;
        int room_temp_degree_y = 10;

        int room_humidity_x_center = 220;
        int room_humidity_y = 123;

        int room_humidity_percent_x_center = 260;
        int room_humidity_percent_y = 116;

        it.print(room_name_x_center - room_x_pad, room_name_y, id(font_room_name_a), TextAlign::TOP_CENTER, "${room_1_name}");
        it.print(room_name_x_center, room_name_y, id(font_room_name_a), TextAlign::TOP_CENTER, "${room_2_name}");
        it.print(room_name_x_center + room_x_pad, room_name_y, id(font_room_name_a), TextAlign::TOP_CENTER, "${room_3_name}");

        it.printf(room_temp_x_center - room_x_pad, room_temp_y, id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_1_temperature_id}).state);
        it.printf(room_temp_x_center, room_temp_y, id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_2_temperature_id}).state);
        it.printf(room_temp_x_center + room_x_pad, room_temp_y, id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_3_temperature_id}).state);

        it.printf(room_temp_degree_x_center - room_x_pad, room_temp_degree_y, id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center, room_temp_degree_y, id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center + room_x_pad, room_temp_degree_y, id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(room_humidity_x_center - room_x_pad, room_humidity_y, id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_1_humidity_id}).state);
        it.printf(room_humidity_x_center, room_humidity_y, id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_2_humidity_id}).state);
        it.printf(room_humidity_x_center + room_x_pad, room_humidity_y, id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_3_humidity_id}).state);

        it.printf(room_humidity_percent_x_center - room_x_pad, room_humidity_percent_y, id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center, room_humidity_percent_y, id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center + room_x_pad, room_humidity_percent_y, id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");

        it.line(0, 178, 465, 178);

        it.print(room_name_x_center - room_x_pad, room_name_y + (room_y_pad * 1), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_4_name}");
        it.print(room_name_x_center, room_name_y + (room_y_pad * 1), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_5_name}");
        it.print(room_name_x_center + room_x_pad, room_name_y + (room_y_pad * 1), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_6_name}");

        it.printf(room_temp_x_center - room_x_pad, room_temp_y + (room_y_pad * 1), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_4_temperature_id}).state);
        it.printf(room_temp_x_center, room_temp_y + (room_y_pad * 1), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_5_temperature_id}).state);
        it.printf(room_temp_x_center + room_x_pad, room_temp_y + (room_y_pad * 1), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_6_temperature_id}).state);

        it.printf(room_temp_degree_x_center - room_x_pad, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center + room_x_pad, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(room_humidity_x_center - room_x_pad, room_humidity_y + (room_y_pad * 1), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_4_humidity_id}).state);
        it.printf(room_humidity_x_center, room_humidity_y + (room_y_pad * 1), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_5_humidity_id}).state);
        it.printf(room_humidity_x_center + room_x_pad, room_humidity_y + (room_y_pad * 1), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_6_humidity_id}).state);

        it.printf(room_humidity_percent_x_center - room_x_pad, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center + room_x_pad, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");

        it.line(0, 178 + room_y_pad, 465, 178 + room_y_pad);

        it.print(room_name_x_center - room_x_pad, room_name_y + (room_y_pad * 2), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_7_name}");
        it.print(room_name_x_center, room_name_y + (room_y_pad * 2), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_8_name}");
        it.print(room_name_x_center + room_x_pad, room_name_y + (room_y_pad * 2), id(font_room_name_a), TextAlign::TOP_CENTER, "${room_9_name}");

        it.printf(room_temp_x_center - room_x_pad, room_temp_y + (room_y_pad * 2), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_7_temperature_id}).state);
        it.printf(room_temp_x_center, room_temp_y + (room_y_pad * 2), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_8_temperature_id}).state);
        it.printf(room_temp_x_center + room_x_pad, room_temp_y + (room_y_pad * 2), id(font_temperature_a), TextAlign::TOP_CENTER, "%.0f", id(${room_9_temperature_id}).state);

        it.printf(room_temp_degree_x_center - room_x_pad, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");
        it.printf(room_temp_degree_x_center + room_x_pad, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(room_humidity_x_center - room_x_pad, room_humidity_y + (room_y_pad * 2), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_7_humidity_id}).state);
        it.printf(room_humidity_x_center, room_humidity_y + (room_y_pad * 2), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_8_humidity_id}).state);
        it.printf(room_humidity_x_center + room_x_pad, room_humidity_y + (room_y_pad * 2), id(font_humidity_a), TextAlign::TOP_CENTER, "%.0f", id(${room_9_humidity_id}).state);

        it.printf(room_humidity_percent_x_center - room_x_pad, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");
        it.printf(room_humidity_percent_x_center + room_x_pad, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent_a), TextAlign::TOP_CENTER, "%%");

        it.line(465, 0, 465, 540);

        // Current Weather

        int forecast_tab_x_0 = 127;

        int large_weather_icon_x_0 = 712;
        int large_weather_icon_y_0 = 0;

        int forecast_header_y_0 = 213;

        int forecast_x_0 = 520;
        int forecast_state_y_0 = 243;

        int forecast_degree_x_0 = 567;
        int forecast_degree_y_0 = 226;

        int forecast_percent_x_0 = 566;
        int forecast_percent_y_0 = 236;

        if (id(wf_current_conditions_icon).has_state()) {
          it.printf(large_weather_icon_x_0, large_weather_icon_y_0, id(font_icon_large_a), TextAlign::TOP_CENTER, id(wf_current_conditions_icon).state.c_str());
        }

        it.printf(forecast_x_0, forecast_header_y_0, id(font_lettering_a), TextAlign::TOP_CENTER, "CURRENTLY");

        if (id(wf_current_conditions_air_temp).state >= 100) {
          it.printf(forecast_x_0 - 21, forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_current_conditions_air_temp).state);
        } else {
          it.printf(forecast_x_0, forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_current_conditions_air_temp).state);
        }
        it.printf(forecast_degree_x_0, forecast_degree_y_0, id(font_current_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_header_y_0, id(font_lettering_a), TextAlign::TOP_CENTER, "HIGH");

        if (id(wf_d_fc_0_air_temp_high).state >= 100) {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 1) - 21, forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_high).state);
        } else {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_high).state);
        }
        it.printf(forecast_degree_x_0 + (forecast_tab_x_0 * 1), forecast_degree_y_0, id(font_current_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(forecast_x_0 + (forecast_tab_x_0 * 2), forecast_header_y_0, id(font_lettering_a), TextAlign::TOP_CENTER, "LOW");
        it.printf(forecast_x_0 + (forecast_tab_x_0 * 2), forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_low).state);
        it.printf(forecast_degree_x_0 + (forecast_tab_x_0 * 2), forecast_degree_y_0, id(font_current_degree_a), TextAlign::TOP_CENTER, "°");

        it.printf(forecast_x_0 + (forecast_tab_x_0 * 3), forecast_header_y_0, id(font_lettering_a), TextAlign::TOP_CENTER, "CHANCE");

        if (id(wf_d_fc_0_precip_prob).state == 100) {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 3) - 21, forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_precip_prob).state);
        } else if (id(wf_d_fc_0_precip_prob).state == 0) {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 3), forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, " 0");
        } else if (id(wf_d_fc_0_precip_prob).state == 5) {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 3), forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, " 5");
        } else {
          it.printf(forecast_x_0 + (forecast_tab_x_0 * 3), forecast_state_y_0, id(font_current_a), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_precip_prob).state);
        }

        it.printf(forecast_percent_x_0 + (forecast_tab_x_0 * 3), forecast_percent_y_0, id(font_current_humidity_percent_a), TextAlign::TOP_CENTER, "%%");

        // Weather Forecast Day +1

        int small_weather_icon_x_1 = 587;
        int small_weather_icon_y_1 = 384;

        int forecast_center_x_1 = 587;
        int forecast_center_degree_x_1 = 621;
        int forecast_center_percent_x_1 = 627;

        int forecast_tab_x_1 = 80;
        int forecast_tab_x_1_adjust = 8;

        int forecast_header_y = 458;
        int forecast_state_y = 487;
        int forecast_degree_y = 479;
        int forecast_percent_y = 482;

        it.line(465, 309, 960, 309);

        // Hourly Details

        int hourly_column = 20;

        int hourly_hour_x = 492;
        int hourly_hour_y = 465;

        int hourly_temperature_y = 399;
        int hourly_degree_x = 510;
        int hourly_degree_y = 416;

        int small_weather_icon_x = 492;
        int small_weather_icon_y = 463;

        int hourly_precip_prob_x = 492;
        int hourly_precip_prob_y = 534;

        int hourly_line_x = 492;
        int hourly_line_y = 441;
        int hourly_line_pad_y = 18;
        int hourly_line_top_wide_x = 6;
        int hourly_line_top_narrow_x = 6;

        it.printf(hourly_hour_x, hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_0_hour_icon).state.c_str());

        it.printf(hourly_hour_x, hourly_temperature_y - (id(wf_h_fc_0_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_0_air_temp).state);
        it.printf(hourly_degree_x, hourly_degree_y - (id(wf_h_fc_0_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_0_icon).has_state()) {
          it.printf(small_weather_icon_x, small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_0_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x, hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_0_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 2), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_2_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 2), hourly_temperature_y - (id(wf_h_fc_2_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_2_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 2), hourly_degree_y - (id(wf_h_fc_2_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_2_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 2), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_2_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 2), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_2_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 4), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_4_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 4), hourly_temperature_y - (id(wf_h_fc_4_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_4_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 4), hourly_degree_y - (id(wf_h_fc_4_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_4_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 4), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_4_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 4), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_4_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 6), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_6_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 6), hourly_temperature_y - (id(wf_h_fc_6_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_6_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 6), hourly_degree_y - (id(wf_h_fc_6_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_6_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 6), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_6_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 6), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_6_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 8), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_8_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 8), hourly_temperature_y - (id(wf_h_fc_8_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_8_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 8), hourly_degree_y - (id(wf_h_fc_8_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_8_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 8), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_8_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 8), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_8_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 10), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_10_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 10), hourly_temperature_y - (id(wf_h_fc_10_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_10_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 10), hourly_degree_y - (id(wf_h_fc_10_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_10_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 10), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_10_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 10), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_10_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 12), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_12_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 12), hourly_temperature_y - (id(wf_h_fc_12_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_12_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 12), hourly_degree_y - (id(wf_h_fc_12_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_12_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 12), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_12_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 12), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_12_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 14), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_14_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 14), hourly_temperature_y - (id(wf_h_fc_14_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_14_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 14), hourly_degree_y - (id(wf_h_fc_14_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_14_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 14), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_14_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 14), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_14_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 16), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_16_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 16), hourly_temperature_y - (id(wf_h_fc_16_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_16_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 16), hourly_degree_y - (id(wf_h_fc_16_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_16_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 16), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_16_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 16), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_16_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 18), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_18_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 18), hourly_temperature_y - (id(wf_h_fc_18_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_18_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 18), hourly_degree_y - (id(wf_h_fc_18_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_18_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 18), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_18_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 18), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_18_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 20), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_20_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 20), hourly_temperature_y - (id(wf_h_fc_20_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_20_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 20), hourly_degree_y - (id(wf_h_fc_20_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_20_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 20), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_20_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 20), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_20_precip_prob_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 22), hourly_hour_y, id(font_clock_a), TextAlign::BOTTOM_CENTER, "%s", id(wf_h_fc_22_hour_icon).state.c_str());

        it.printf(hourly_hour_x + (hourly_column * 22), hourly_temperature_y - (id(wf_h_fc_22_pxl).state * .65), id(font_hourly_a), TextAlign::BOTTOM_CENTER, "%.0f", id(wf_h_fc_22_air_temp).state);
        it.printf(hourly_degree_x + (hourly_column * 22), hourly_degree_y - (id(wf_h_fc_22_pxl).state * .65), id(font_hourly_degree_a), TextAlign::BOTTOM_CENTER, "°");

        if (id(wf_h_fc_22_icon).has_state()) {
          it.printf(small_weather_icon_x + (hourly_column * 22), small_weather_icon_y, id(font_icon_small_a), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_22_icon).state.c_str());
        }

        it.printf(hourly_precip_prob_x + (hourly_column * 22), hourly_precip_prob_y, id(font_pie_a), TextAlign::BOTTOM_CENTER, id(wf_h_fc_22_precip_prob_icon).state.c_str());

        it.line(465, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65), hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65));

        it.line(hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65), hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65), hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65), hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65), hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65), hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65), hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65), hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65), hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65), hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65), hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65), hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65), hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65), hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65), hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65), hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65), hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65), hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65), hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65), hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65), hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65), hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65), hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65), hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65));

        it.line(hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65), 960, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65));

        it.line(465, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 1, hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 1);

        it.line(hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65) + 1, hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 1);

        it.line(hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 1, 960, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 1);

        it.line(465, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 2, hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 2);

        it.line(hourly_line_x, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_0_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_1_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_2_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_3_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_4_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_5_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_6_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_7_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_8_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_9_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_10_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_11_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_12_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_13_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_14_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_15_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_16_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_17_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_18_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_19_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_20_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_21_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_22_pxl).state * .65) + 2, hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 2);

        it.line(hourly_line_x + (hourly_column * 23), hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 2, 960, hourly_line_y - hourly_line_pad_y - (id(wf_h_fc_23_pxl).state * .65) + 2);

        }
        
        else if (id(${devicename}_page).state == "B") {

      // Last Updated
      it.strftime(5, 5, id(font_last_updated_b), TextAlign::TOP_LEFT, "%I:%M %p", id(ntp).now());
      
      int wifi_x_b = 5;
      int wifi_y_b = 40;
      
      // WiFi Signal Strength
      
      if (id(${devicename}_WiFi_Signal).has_state()) {
        if (id(${devicename}_WiFi_Signal).state >= -50) {
          //Excellent
          it.print(wifi_x_b, wifi_y_b, id(font_wifi_b), TextAlign::TOP_LEFT, "󰤨");
          ESP_LOGI("WiFi", "Exellent");
        } else if (id(${devicename}_WiFi_Signal).state >= -60) {
          //Good
          it.print(wifi_x_b, wifi_y_b, id(font_wifi_b), TextAlign::TOP_LEFT, "󰤥");
          ESP_LOGI("WiFi", "Good");
        } else if (id(${devicename}_WiFi_Signal).state >= -67) {
          //Fair
          it.print(wifi_x_b, wifi_y_b, id(font_wifi_b), TextAlign::TOP_LEFT, "󰤢");
          ESP_LOGI("WiFi", "Fair");
        } else if (id(${devicename}_WiFi_Signal).state >= -70) {
          //Weak
          it.print(wifi_x_b, wifi_y_b, id(font_wifi_b), TextAlign::TOP_LEFT, "󰤟");
          ESP_LOGI("WiFi", "Weak");
        } else {
          //Unlikely working signal
          it.print(wifi_x_b, wifi_y_b, id(font_wifi_b), TextAlign::TOP_LEFT, "󰤫");
          ESP_LOGI("WiFi", "Unlikely");
        }
      }

      int battery_voltage_x = 35;
      int battery_voltage_y = 40;

      // Battery Voltage
      
      if (id(${devicename}_battery_voltage).has_state()) {
        if (id(${devicename}_battery_voltage).state >= 3.7) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󰁹");
        } else if (id(${devicename}_battery_voltage).state >= 3.5) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󰂁");
        } else if (id(${devicename}_battery_voltage).state >= 3.3) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󰁿");
        } else if (id(${devicename}_battery_voltage).state >= 3.1) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󰁽");
        } else if (id(${devicename}_battery_voltage).state >= 3.0) {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󰁻");
        } else {
          it.print(battery_voltage_x, battery_voltage_y, id(font_battery_b), TextAlign::TOP_LEFT, "󱃍");
        }

      }

      int large_weather_icon_x = 240;
      int large_weather_icon_y = 2;

      // Weather Forecast Icon

      if (id(wf_current_conditions_icon).has_state()) {
        it.printf(large_weather_icon_x, large_weather_icon_y, id(font_icon_large_b), TextAlign::TOP_CENTER, "%s", id(wf_current_conditions_icon).state.c_str());
        //it.printf(large_weather_icon_x, large_weather_icon_y, id(font_icon_large_b), TextAlign::TOP_CENTER, " ");
      }

      // Outside Temperature
      it.printf(253, 528, id(font_current_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_current_conditions_air_temp).state);
      it.printf(253, 475, id(font_current_degree_b), TextAlign::BASELINE_LEFT, "°");

      // Today's HI LO Temperature

      int row_0 = 360;

      int word_high_x_0 = 315;
      int word_high_y_0 = 10  + row_0;
      int word_low_x_0 = 315;
      int word_low_y_0 = 180 + row_0;
      
      int temp_state_high_x_0 = 450;
      int temp_state_high_y_0 = 80 + row_0;
      int temp_degree_high_x_0 = 452;
      int temp_degree_high_y_0 = 56 + row_0;

      int temp_state_low_x_0 = 450;
      int temp_state_low_y_0 = 168 + row_0;
      int temp_degree_low_x_0 = 452;
      int temp_degree_low_y_0 = 145 + row_0;

      it.printf(word_high_x_0, word_high_y_0, id(font_hi_lo_words_b), TextAlign::TOP_CENTER, "HI");
      it.printf(temp_state_high_x_0, temp_state_high_y_0, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_0_air_temp_high).state);
      it.printf(temp_degree_high_x_0, temp_degree_high_y_0, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      it.printf(word_low_x_0, word_low_y_0, id(font_hi_lo_words_b), TextAlign::BOTTOM_CENTER, "LO");
      it.printf(temp_state_low_x_0, temp_state_low_y_0, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_0_air_temp_low).state);
      it.printf(temp_degree_low_x_0, temp_degree_low_y_0, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      //it.printf(315, 432, id(font_hi_lo_words_b), TextAlign::BASELINE_LEFT, "HI");
      //it.printf(450, 450, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_0_air_temp_high).state);
      //it.printf(452, 437, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      //it.printf(315, 510, id(font_hi_lo_words_b), TextAlign::BASELINE_LEFT, "LO");
      //it.printf(450, 528, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_0_air_temp_low).state);
      //it.printf(452, 515, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      // Forecast Day + 1

      int small_weather_icon_x_1 = 675;
      int small_weather_icon_y_1 = 5;
      int day_x_1 = 575;
      int day_y_1 = 68;
      int word_high_x_1 = 790;
      int word_high_y_1 = 10;
      int word_low_x_1 = 790;
      int word_low_y_1 = 180;
      
      int temp_state_high_x_1 = 925;
      int temp_state_high_y_1 = 80;
      int temp_degree_high_x_1 = 927;
      int temp_degree_high_y_1 = 56;

      int temp_state_low_x_1 = 925;
      int temp_state_low_y_1 = 168;
      int temp_degree_low_x_1 = 927;
      int temp_degree_low_y_1 = 145;

      if (id(wf_d_fc_1_icon).has_state()) {
        it.printf(small_weather_icon_x_1, small_weather_icon_y_1, id(font_icon_small_b), TextAlign::TOP_CENTER, "%s", id(wf_d_fc_1_icon).state.c_str());
      }

      it.printf(day_x_1, day_y_1, id(font_date_b), TextAlign::CENTER_RIGHT, "%.0f/%.0f", id(wf_d_fc_1_month_num).state, id(wf_d_fc_1_day_num).state);
      it.printf(day_x_1, day_y_1 + 30, id(font_day_b), TextAlign::TOP_RIGHT, "%s", id(wf_d_fc_1_day_name).state.substr(0, 3).c_str());

      it.printf(word_high_x_1, word_high_y_1, id(font_hi_lo_words_b), TextAlign::TOP_CENTER, "HI");
      it.printf(temp_state_high_x_1, temp_state_high_y_1, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_1_air_temp_high).state);
      it.printf(temp_degree_high_x_1, temp_degree_high_y_1, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      it.printf(word_low_x_1, word_low_y_1, id(font_hi_lo_words_b), TextAlign::BOTTOM_CENTER, "LO");
      it.printf(temp_state_low_x_1, temp_state_low_y_1, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_1_air_temp_low).state);
      it.printf(temp_degree_low_x_1, temp_degree_low_y_1, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      // Forecast Day + 2

      int row_2 = 180;

      int small_weather_icon_x_2 = 675;
      int small_weather_icon_y_2 = 5 + row_2;
      int day_x_2 = 575;
      int day_y_2 = 68 + row_2;
      int word_high_x_2 = 790;
      int word_high_y_2 = 10 + row_2;
      int word_low_x_2 = 790;
      int word_low_y_2 = 180 + row_2;
      
      int temp_state_high_x_2 = 925;
      int temp_state_high_y_2 = 80 + row_2;
      int temp_degree_high_x_2 = 927;
      int temp_degree_high_y_2 = 56 + row_2;

      int temp_state_low_x_2 = 925;
      int temp_state_low_y_2 = 168 + row_2;
      int temp_degree_low_x_2 = 927;
      int temp_degree_low_y_2 = 145 + row_2;

      if (id(wf_d_fc_2_icon).has_state()) {
        it.printf(small_weather_icon_x_2, small_weather_icon_y_2, id(font_icon_small_b), TextAlign::TOP_CENTER, "%s", id(wf_d_fc_2_icon).state.c_str());
      }

      it.printf(day_x_2, day_y_2, id(font_date_b), TextAlign::CENTER_RIGHT, "%.0f/%.0f", id(wf_d_fc_2_month_num).state, id(wf_d_fc_2_day_num).state);
      it.printf(day_x_2, day_y_2 + 30, id(font_day_b), TextAlign::TOP_RIGHT, "%s", id(wf_d_fc_2_day_name).state.substr(0, 3).c_str());

      it.printf(word_high_x_2, word_high_y_2, id(font_hi_lo_words_b), TextAlign::TOP_CENTER, "HI");
      it.printf(temp_state_high_x_2, temp_state_high_y_2, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_2_air_temp_high).state);
      it.printf(temp_degree_high_x_2, temp_degree_high_y_2, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      it.printf(word_low_x_2, word_low_y_2, id(font_hi_lo_words_b), TextAlign::BOTTOM_CENTER, "LO");
      it.printf(temp_state_low_x_2, temp_state_low_y_2, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_2_air_temp_low).state);
      it.printf(temp_degree_low_x_2, temp_degree_low_y_2, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");


      // Forecast Day + 3

      int row_3 = 360;

      int small_weather_icon_x_3 = 675;
      int small_weather_icon_y_3 = 5 + row_3;
      int day_x_3 = 575;
      int day_y_3 = 68 + row_3;
      int word_high_x_3 = 790;
      int word_high_y_3 = 10 + row_3;
      int word_low_x_3 = 790;
      int word_low_y_3 = 180 + row_3;
      
      int temp_state_high_x_3 = 925;
      int temp_state_high_y_3 = 80 + row_3;
      int temp_degree_high_x_3 = 927;
      int temp_degree_high_y_3 = 56 + row_3;

      int temp_state_low_x_3 = 925;
      int temp_state_low_y_3 = 168 + row_3;
      int temp_degree_low_x_3 = 927;
      int temp_degree_low_y_3 = 145 + row_3;

      if (id(wf_d_fc_3_icon).has_state()) {
        it.printf(small_weather_icon_x_3, small_weather_icon_y_3, id(font_icon_small_b), TextAlign::TOP_CENTER, "%s", id(wf_d_fc_3_icon).state.c_str());
      }

      it.printf(day_x_3, day_y_3, id(font_date_b), TextAlign::CENTER_RIGHT, "%.0f/%.0f", id(wf_d_fc_3_month_num).state, id(wf_d_fc_3_day_num).state);
      it.printf(day_x_3, day_y_3 + 30, id(font_day_b), TextAlign::TOP_RIGHT, "%s", id(wf_d_fc_3_day_name).state.substr(0, 3).c_str());

      it.printf(word_high_x_3, word_high_y_3, id(font_hi_lo_words_b), TextAlign::TOP_CENTER, "HI");
      it.printf(temp_state_high_x_3, temp_state_high_y_3, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_3_air_temp_high).state);
      it.printf(temp_degree_high_x_3, temp_degree_high_y_3, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      it.printf(word_low_x_3, word_low_y_3, id(font_hi_lo_words_b), TextAlign::BOTTOM_CENTER, "LO");
      it.printf(temp_state_low_x_3, temp_state_low_y_3, id(font_hi_lo_temperature_b), TextAlign::BASELINE_RIGHT, "%.0f", id(wf_d_fc_3_air_temp_low).state);
      it.printf(temp_degree_low_x_3, temp_degree_low_y_3, id(font_hi_lo_degree_b), TextAlign::BASELINE_LEFT, "°");

      // Lines

      it.line(480, 177, 960, 177);
      it.line(480, 356, 960, 356);
      it.line(480, 0, 480, 540);

        } else if (id(${devicename}_page).state == "C") {

            // tab

            if (id(wf_h_fc_22_pxl).state < 90) {

              ESP_LOGI("Last Update", "Right");

              int last_update_x_c = 955;
              int last_update_y_c = 205;

              int wifi_x_c = 870;
              int wifi_y_c = 205;

              int battery_voltage_x_c = 890;
              int battery_voltage_y_c = 205;

              // Last Updated

              it.strftime(last_update_x_c, last_update_y_c, id(font_lettering_c), TextAlign::TOP_RIGHT, "%I:%M %p", id(ntp).now());

              // WiFi Signal Strength

              if (id(${devicename}_WiFi_Signal).has_state()) {
                if (id(${devicename}_WiFi_Signal).state >= -50) {
                  //Excellent
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤨");
                  ESP_LOGI("WiFi", "Exellent");
                } else if (id(${devicename}_WiFi_Signal).state >= -60) {
                  //Good
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤥");
                  ESP_LOGI("WiFi", "Good");
                } else if (id(${devicename}_WiFi_Signal).state >= -67) {
                  //Fair
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤢");
                  ESP_LOGI("WiFi", "Fair");
                } else if (id(${devicename}_WiFi_Signal).state >= -70) {
                  //Weak
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤟");
                  ESP_LOGI("WiFi", "Weak");
                } else {
                  //Unlikely working signal
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤫");
                  ESP_LOGI("WiFi", "Unlikely");
                }
              }

              // Battery Voltage

              if (id(${devicename}_battery_voltage).has_state()) {
                if (id(${devicename}_battery_voltage).state >= 3.7) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁹");
                } else if (id(${devicename}_battery_voltage).state >= 3.5) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰂁");
                } else if (id(${devicename}_battery_voltage).state >= 3.3) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁿");
                } else if (id(${devicename}_battery_voltage).state >= 3.1) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁽");
                } else if (id(${devicename}_battery_voltage).state >= 3.0) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁻");
                } else {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󱃍");
                }

              }

            }

            // Current Forecast

            int large_weather_icon_x_0 = 90;
            int large_weather_icon_y_0 = 0;

            int forecast_conditions_y_0 = 200;

            it.printf(0, 0, id(font_lettering_c), TextAlign::TOP_LEFT, "%s", id(wf_d_fc_0_day_name).state.c_str());
            it.printf(large_weather_icon_x_0, forecast_conditions_y_0, id(font_lettering_c), TextAlign::BOTTOM_CENTER, "%s", id(wf_current_conditions_conditions).state.c_str());

            if (id(wf_current_conditions_icon).has_state()) {
              it.printf(large_weather_icon_x_0, large_weather_icon_y_0, id(font_icon_large_c), TextAlign::TOP_CENTER, "%s", id(wf_current_conditions_icon).state.c_str());
            }

            int forecast_x_0 = 235;
            int forecast_y_0 = 0;

            int forecast_tab_x_0 = 150;

            int forecast_degree_x_0 = 294;
            int forecast_degree_y_0 = 4;

            int forecast_percent_x_0 = 299;
            int forecast_percent_y_0 = 2;

            int forecast_state_y_0 = 20;
            int forecast_state_pad_y_0 = 102;

            it.printf(forecast_x_0, forecast_y_0, id(font_lettering_c), TextAlign::TOP_CENTER, "CURRENTLY");
            if (id(wf_current_conditions_air_temp).state >= 100) {
              it.printf(forecast_x_0 - 23, forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_current_conditions_air_temp).state);
            } else if (id(wf_current_conditions_air_temp).state == 0) {
              it.printf(forecast_x_0, forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_0, forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_current_conditions_air_temp).state);
            }
            it.printf(forecast_degree_x_0, forecast_degree_y_0, id(font_current_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_0, forecast_y_0 + forecast_state_pad_y_0, id(font_lettering_c), TextAlign::TOP_CENTER, "CHANCE");
            if (id(wf_d_fc_0_precip_prob).state == 100) {
              it.printf(forecast_x_0, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, "00");
              it.printf(forecast_x_0 - 67, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, "1");
            } else if (id(wf_d_fc_0_precip_prob).state == 0) {
              it.printf(forecast_x_0, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_0, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_precip_prob).state);
            }
            it.printf(forecast_percent_x_0, forecast_percent_y_0 + forecast_state_pad_y_0, id(font_current_humidity_percent_c), TextAlign::TOP_CENTER, "%%");

            it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_y_0, id(font_lettering_c), TextAlign::TOP_CENTER, "HIGH");
            if (id(wf_d_fc_0_air_temp_high).state >= 100) {
              it.printf(forecast_x_0 + (forecast_tab_x_0 * 1) - 23, forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_high).state);
            } else if (id(wf_d_fc_0_air_temp_high).state == 0) {
              it.printf(forecast_x_0, forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_state_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_high).state);
            }
            it.printf(forecast_degree_x_0 + (forecast_tab_x_0 * 1), forecast_degree_y_0, id(font_current_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_y_0 + forecast_state_pad_y_0, id(font_lettering_c), TextAlign::TOP_CENTER, "LOW");
            if (id(wf_d_fc_0_air_temp_low).state >= 100) {
              it.printf(forecast_x_0 + (forecast_tab_x_0 * 1) - 23, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_low).state);
            } else if (id(wf_d_fc_0_air_temp_low).state == 0) {
              it.printf(forecast_x_0, forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_0 + (forecast_tab_x_0 * 1), forecast_state_y_0 + forecast_state_pad_y_0, id(font_current_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_0_air_temp_low).state);
            }
            it.printf(forecast_degree_x_0 + (forecast_tab_x_0 * 1), forecast_degree_y_0 + forecast_state_pad_y_0, id(font_current_degree_c), TextAlign::TOP_CENTER, "°");

            // Weather Forecast Day +1

            int large_weather_icon_x_1 = 795 - 250;
            int large_weather_icon_y_1 = 0;

            int forecast_conditions_y_1 = 200;

            if (id(wf_d_fc_1_icon).has_state()) {
              it.printf(large_weather_icon_x_1, large_weather_icon_y_1, id(font_icon_large_c), TextAlign::TOP_CENTER, "%s", id(wf_d_fc_1_icon).state.c_str());
            }

            it.printf(large_weather_icon_x_1, forecast_conditions_y_1, id(font_lettering_c), TextAlign::BOTTOM_CENTER, "%s", id(wf_d_fc_1_conditions).state.c_str());

            it.printf(710 - 250, 0, id(font_lettering_c), TextAlign::TOP_LEFT, "%s", id(wf_d_fc_1_day_name).state.c_str());

            int forecast_x_1 = 912 - 250;
            int forecast_degree_x_1 = 941 - 250;
            int forecast_percent_x_1 = 945 - 250;

            int forecast_row_y_1 = 67;

            int forecast_header_y_1 = 0;
            int forecast_state_y_1 = 23;
            int forecast_degree_y_1 = 14;
            int forecast_percent_y_1 = 17;

            it.printf(forecast_x_1, forecast_header_y_1, id(font_lettering_c), TextAlign::TOP_CENTER, "HIGH");

            if (id(wf_d_fc_1_air_temp_high).state >= 100) {

              it.printf(forecast_x_1 - 11, forecast_state_y_1, id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_1_air_temp_high).state);
            } else if (id(wf_d_fc_0_air_temp_low).state == 0) {
              it.printf(forecast_x_1, forecast_state_y_1, id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_1, forecast_state_y_1, id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_1_air_temp_high).state);
            }

            it.printf(forecast_degree_x_1, forecast_degree_y_1, id(font_hourly_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_1, forecast_header_y_1 + (forecast_row_y_1 * 1), id(font_lettering_c), TextAlign::TOP_CENTER, "LOW");

            if (id(wf_d_fc_1_air_temp_low).state >= 100) {

              it.printf(forecast_x_1 - 11, forecast_state_y_1 + (forecast_row_y_1 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_1_air_temp_low).state);
            } else if (id(wf_d_fc_0_air_temp_low).state == 0) {
              it.printf(forecast_x_1, forecast_state_y_1 + (forecast_row_y_1 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_1, forecast_state_y_1 + (forecast_row_y_1 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_1_air_temp_low).state);
            }

            it.printf(forecast_degree_x_1, forecast_degree_y_1 + (forecast_row_y_1 * 1), id(font_hourly_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_1, forecast_header_y_1 + (forecast_row_y_1 * 2), id(font_lettering_c), TextAlign::TOP_CENTER, "CHANCE");

            if (id(wf_d_fc_1_precip_prob).state == 100) {
              it.printf(forecast_x_1, forecast_state_y_1 + (forecast_row_y_1 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "00");
              it.printf(forecast_x_1 - 35, forecast_state_y_1 + (forecast_row_y_1 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "1");
            } else if (id(wf_d_fc_1_precip_prob).state == 0) {
              it.printf(forecast_x_1, forecast_state_y_1 + (forecast_row_y_1 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_1, forecast_state_y_1 + (forecast_row_y_1 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_1_precip_prob).state);
            }

            it.printf(forecast_percent_x_1, forecast_percent_y_1 + (forecast_row_y_1 * 2), id(font_humidity_percent_c), TextAlign::TOP_CENTER, "%%");

            // Weather Forecast Day +2

            int large_weather_icon_x_2 = 795;
            int large_weather_icon_y_2 = 0;

            int forecast_conditions_y_2 = 200;

            if (id(wf_d_fc_2_icon).has_state()) {
              it.printf(large_weather_icon_x_2, large_weather_icon_y_2, id(font_icon_large_c), TextAlign::TOP_CENTER, "%s", id(wf_d_fc_2_icon).state.c_str());
            }

            it.printf(large_weather_icon_x_2, forecast_conditions_y_2, id(font_lettering_c), TextAlign::BOTTOM_CENTER, "%s", id(wf_d_fc_2_conditions).state.c_str());

            it.printf(710, 0, id(font_lettering_c), TextAlign::TOP_LEFT, "%s", id(wf_d_fc_2_day_name).state.c_str());

            int forecast_x_2 = 912;
            int forecast_degree_x_2 = 941;
            int forecast_percent_x_2 = 945;

            int forecast_row_y_2 = 67;

            int forecast_header_y_2 = 0;
            int forecast_state_y_2 = 23;
            int forecast_degree_y_2 = 14;
            int forecast_percent_y_2 = 17;

            it.printf(forecast_x_2, forecast_header_y_2, id(font_lettering_c), TextAlign::TOP_CENTER, "HIGH");

            if (id(wf_d_fc_2_air_temp_high).state >= 100) {

              it.printf(forecast_x_2 - 11, forecast_state_y_2, id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_2_air_temp_high).state);
            } else if (id(wf_d_fc_0_air_temp_low).state == 0) {
              it.printf(forecast_x_2, forecast_state_y_2, id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_2, forecast_state_y_2, id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_2_air_temp_high).state);
            }

            it.printf(forecast_degree_x_2, forecast_degree_y_2, id(font_hourly_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_2, forecast_header_y_2 + (forecast_row_y_2 * 1), id(font_lettering_c), TextAlign::TOP_CENTER, "LOW");

            if (id(wf_d_fc_2_air_temp_low).state >= 100) {

              it.printf(forecast_x_2 - 11, forecast_state_y_2 + (forecast_row_y_2 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_2_air_temp_low).state);
            } else if (id(wf_d_fc_0_air_temp_low).state == 0) {
              it.printf(forecast_x_2, forecast_state_y_2 + (forecast_row_y_2 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_2, forecast_state_y_2 + (forecast_row_y_2 * 1), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_2_air_temp_low).state);
            }

            it.printf(forecast_degree_x_2, forecast_degree_y_2 + (forecast_row_y_2 * 1), id(font_hourly_degree_c), TextAlign::TOP_CENTER, "°");

            it.printf(forecast_x_2, forecast_header_y_2 + (forecast_row_y_2 * 2), id(font_lettering_c), TextAlign::TOP_CENTER, "CHANCE");

            if (id(wf_d_fc_2_precip_prob).state == 100) {
              it.printf(forecast_x_2, forecast_state_y_2 + (forecast_row_y_2 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "00");
              it.printf(forecast_x_2 - 35, forecast_state_y_2 + (forecast_row_y_2 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "1");
            } else if (id(wf_d_fc_2_precip_prob).state == 0) {
              it.printf(forecast_x_2, forecast_state_y_2 + (forecast_row_y_2 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, " 0");
            } else {
              it.printf(forecast_x_2, forecast_state_y_2 + (forecast_row_y_2 * 2), id(font_humidity_c), TextAlign::TOP_CENTER, "%.0f", id(wf_d_fc_2_precip_prob).state);
            }

            it.printf(forecast_percent_x_2, forecast_percent_y_2 + (forecast_row_y_2 * 2), id(font_humidity_percent_c), TextAlign::TOP_CENTER, "%%");

            // Lines

            it.line(458, 0, 458, 200);
            it.line(706, 0, 706, 200);
            it.line(0, 200, 960, 200);

            // Highlight Weekend

            if (id(wf_d_fc_0_day_name).state == "SATURDAY" || id(wf_d_fc_0_day_name).state == "SUNDAY") {
              it.line(0, 198, 458, 198);
              it.line(0, 199, 458, 199);
              it.line(0, 201, 458, 201);
            }

            if (id(wf_d_fc_1_day_name).state == "SATURDAY" || id(wf_d_fc_1_day_name).state == "SUNDAY") {
              it.line(458, 198, 706, 198);
              it.line(458, 199, 706, 199);
              it.line(458, 201, 706, 201);
            }

            if (id(wf_d_fc_2_day_name).state == "SATURDAY" || id(wf_d_fc_2_day_name).state == "SUNDAY") {
              it.line(706, 198, 960, 198);
              it.line(706, 199, 960, 199);
              it.line(706, 201, 960, 201);
            }

            // Hourly Details

            int hourly_column = 39;

            int hourly_hour_x = 66;
            int hourly_hour_y = 411;

            int hourly_am_pm_x = 88;
            int hourly_am_pm_y = 417;
            int hourly_am_pm_pad_y = 10;

            int hourly_temperature_y = 347;
            int hourly_degree_x = 80;
            int hourly_degree_y = 367;

            int small_weather_icon_x = 56;
            int small_weather_icon_y = 423;

            int hourly_precip_prob_x = 66;
            int hourly_precip_prob_y = 523;
            int hourly_precip_percentage_x = 88;
            int hourly_precip_percentage_y = 537;

            int hourly_line_x = 48;
            int hourly_line_y = 380;
            int hourly_line_pad_y = 18;
            int hourly_line_top_wide_x = 22;
            int hourly_line_top_narrow_x = 8;

            it.printf(hourly_hour_x, hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_hour).state);

            if (id(wf_h_fc_0_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x, hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x, hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x, hourly_temperature_y - id(wf_h_fc_0_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_air_temp).state);
            it.printf(hourly_degree_x, hourly_degree_y - id(wf_h_fc_0_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_0_icon).has_state()) {
              it.printf(small_weather_icon_x, small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_0_icon).state.c_str());
            }

            if (id(wf_h_fc_0_pxl).has_state()) {
              it.line(hourly_line_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_0_pxl).state, hourly_line_x, hourly_line_y);
              it.line(hourly_line_x - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_0_pxl).state, hourly_line_x + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_0_pxl).state);
            }

            it.printf(hourly_precip_prob_x, hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_precip_prob).state);
            it.printf(hourly_precip_percentage_x, hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_1_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 1), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_1_pxl).state, hourly_line_x + (hourly_column * 1), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 1) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_1_pxl).state, hourly_line_x + (hourly_column * 1) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_1_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 2), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_hour).state);

            if (id(wf_h_fc_2_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 2), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 2), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 2), hourly_temperature_y - id(wf_h_fc_2_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 2), hourly_degree_y - id(wf_h_fc_2_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_2_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 2), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_2_icon).state.c_str());
            }

            if (id(wf_h_fc_2_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 2), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_2_pxl).state, hourly_line_x + (hourly_column * 2), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 2) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_2_pxl).state, hourly_line_x + (hourly_column * 2) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_2_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 2), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 2), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_3_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 3), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_3_pxl).state, hourly_line_x + (hourly_column * 3), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 3) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_3_pxl).state, hourly_line_x + (hourly_column * 3) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_3_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 4), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_hour).state);

            if (id(wf_h_fc_4_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 4), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 4), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 4), hourly_temperature_y - id(wf_h_fc_4_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 4), hourly_degree_y - id(wf_h_fc_4_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_4_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 4), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_4_icon).state.c_str());
            }

            if (id(wf_h_fc_4_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 4), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_4_pxl).state, hourly_line_x + (hourly_column * 4), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 4) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_4_pxl).state, hourly_line_x + (hourly_column * 4) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_4_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 4), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 4), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_5_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 5), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_5_pxl).state, hourly_line_x + (hourly_column * 5), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 5) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_5_pxl).state, hourly_line_x + (hourly_column * 5) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_5_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 6), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_hour).state);

            if (id(wf_h_fc_6_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 6), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 6), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 6), hourly_temperature_y - id(wf_h_fc_6_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 6), hourly_degree_y - id(wf_h_fc_6_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_6_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 6), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_6_icon).state.c_str());
            }

            if (id(wf_h_fc_6_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 6), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_6_pxl).state, hourly_line_x + (hourly_column * 6), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 6) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_6_pxl).state, hourly_line_x + (hourly_column * 6) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_6_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 6), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 6), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_7_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 7), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_7_pxl).state, hourly_line_x + (hourly_column * 7), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 7) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_7_pxl).state, hourly_line_x + (hourly_column * 7) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_7_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 8), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_hour).state);

            if (id(wf_h_fc_8_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 8), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 8), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 8), hourly_temperature_y - id(wf_h_fc_8_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 8), hourly_degree_y - id(wf_h_fc_8_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_8_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 8), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_8_icon).state.c_str());
            }

            if (id(wf_h_fc_8_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 8), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_8_pxl).state, hourly_line_x + (hourly_column * 8), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 8) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_8_pxl).state, hourly_line_x + (hourly_column * 8) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_8_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 8), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 8), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_9_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 9), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_9_pxl).state, hourly_line_x + (hourly_column * 9), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 9) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_9_pxl).state, hourly_line_x + (hourly_column * 9) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_9_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 10), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_hour).state);

            if (id(wf_h_fc_10_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 10), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 10), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 10), hourly_temperature_y - id(wf_h_fc_10_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 10), hourly_degree_y - id(wf_h_fc_10_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_10_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 10), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_10_icon).state.c_str());
            }

            if (id(wf_h_fc_10_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 10), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_10_pxl).state, hourly_line_x + (hourly_column * 10), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 10) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_10_pxl).state, hourly_line_x + (hourly_column * 10) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_10_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 10), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 10), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_11_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 11), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_11_pxl).state, hourly_line_x + (hourly_column * 11), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 11) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_11_pxl).state, hourly_line_x + (hourly_column * 11) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_11_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 12), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_12_hour).state);

            if (id(wf_h_fc_12_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 12), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 12), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 12), hourly_temperature_y - id(wf_h_fc_12_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_12_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 12), hourly_degree_y - id(wf_h_fc_12_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_12_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 12), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_12_icon).state.c_str());
            }

            if (id(wf_h_fc_12_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 12), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_12_pxl).state, hourly_line_x + (hourly_column * 12), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 12) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_12_pxl).state, hourly_line_x + (hourly_column * 12) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_12_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 12), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_12_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 12), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_13_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 13), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_13_pxl).state, hourly_line_x + (hourly_column * 13), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 13) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_13_pxl).state, hourly_line_x + (hourly_column * 13) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_13_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 14), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_14_hour).state);

            if (id(wf_h_fc_14_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 14), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 14), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 14), hourly_temperature_y - id(wf_h_fc_14_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_14_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 14), hourly_degree_y - id(wf_h_fc_14_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_14_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 14), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_14_icon).state.c_str());
            }

            if (id(wf_h_fc_14_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 14), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_14_pxl).state, hourly_line_x + (hourly_column * 14), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 14) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_14_pxl).state, hourly_line_x + (hourly_column * 14) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_14_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 14), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_14_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 14), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_15_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 15), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_15_pxl).state, hourly_line_x + (hourly_column * 15), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 15) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_15_pxl).state, hourly_line_x + (hourly_column * 15) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_15_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 16), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_16_hour).state);

            if (id(wf_h_fc_16_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 16), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 16), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 16), hourly_temperature_y - id(wf_h_fc_16_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_16_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 16), hourly_degree_y - id(wf_h_fc_16_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_16_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 16), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_16_icon).state.c_str());
            }

            if (id(wf_h_fc_16_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 16), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_16_pxl).state, hourly_line_x + (hourly_column * 16), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 16) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_16_pxl).state, hourly_line_x + (hourly_column * 16) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_16_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 16), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_16_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 16), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_17_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 17), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_17_pxl).state, hourly_line_x + (hourly_column * 17), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 17) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_17_pxl).state, hourly_line_x + (hourly_column * 17) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_17_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 18), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_18_hour).state);

            if (id(wf_h_fc_18_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 18), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 18), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 18), hourly_temperature_y - id(wf_h_fc_18_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_18_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 18), hourly_degree_y - id(wf_h_fc_18_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_18_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 18), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_18_icon).state.c_str());
            }

            if (id(wf_h_fc_18_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 18), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_18_pxl).state, hourly_line_x + (hourly_column * 18), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 18) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_18_pxl).state, hourly_line_x + (hourly_column * 18) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_18_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 18), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_18_precip_prob).state);

            it.printf(hourly_precip_percentage_x + (hourly_column * 18), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_19_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 19), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_19_pxl).state, hourly_line_x + (hourly_column * 19), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 19) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_19_pxl).state, hourly_line_x + (hourly_column * 19) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_19_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 20), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_20_hour).state);

            if (id(wf_h_fc_20_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 20), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 20), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 20), hourly_temperature_y - id(wf_h_fc_20_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_20_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 20), hourly_degree_y - id(wf_h_fc_20_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_20_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 20), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_20_icon).state.c_str());
            }

            if (id(wf_h_fc_20_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 20), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_20_pxl).state, hourly_line_x + (hourly_column * 20), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 20) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_20_pxl).state, hourly_line_x + (hourly_column * 20) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_20_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 20), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_20_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 20), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

            if (id(wf_h_fc_21_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 21), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_21_pxl).state, hourly_line_x + (hourly_column * 21), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 21) - hourly_line_top_narrow_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_21_pxl).state, hourly_line_x + (hourly_column * 21) + hourly_line_top_narrow_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_21_pxl).state);
            }

            it.printf(hourly_hour_x + (hourly_column * 22), hourly_hour_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_22_hour).state);

            if (id(wf_h_fc_22_am_pm).state == "AM") {
              it.printf(hourly_am_pm_x + (hourly_column * 22), hourly_am_pm_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "AM");
            } else {
              it.printf(hourly_am_pm_x + (hourly_column * 22), hourly_am_pm_y + hourly_am_pm_pad_y, id(font_lettering_c), TextAlign::BOTTOM_RIGHT, "PM");
            }

            it.printf(hourly_hour_x + (hourly_column * 22), hourly_temperature_y - id(wf_h_fc_22_pxl).state, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_22_air_temp).state);
            it.printf(hourly_degree_x + (hourly_column * 22), hourly_degree_y - id(wf_h_fc_22_pxl).state, id(font_hourly_degree_c), TextAlign::BOTTOM_RIGHT, "°");

            if (id(wf_h_fc_22_icon).has_state()) {
              it.printf(small_weather_icon_x + (hourly_column * 22), small_weather_icon_y, id(font_icon_small_c), TextAlign::TOP_CENTER, "%s", id(wf_h_fc_22_icon).state.c_str());
            }

            if (id(wf_h_fc_22_pxl).has_state()) {
              it.line(hourly_line_x + (hourly_column * 22), hourly_line_y - hourly_line_pad_y - id(wf_h_fc_22_pxl).state, hourly_line_x + (hourly_column * 22), hourly_line_y);
              it.line(hourly_line_x + (hourly_column * 22) - hourly_line_top_wide_x, hourly_line_y - hourly_line_pad_y - id(wf_h_fc_22_pxl).state, hourly_line_x + (hourly_column * 22) + hourly_line_top_wide_x,
                hourly_line_y - hourly_line_pad_y - id(wf_h_fc_22_pxl).state);
            }

            it.printf(hourly_precip_prob_x + (hourly_column * 22), hourly_precip_prob_y, id(font_hourly_c), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_22_precip_prob).state);
            it.printf(hourly_precip_percentage_x + (hourly_column * 22), hourly_precip_percentage_y, id(font_humidity_percent_c), TextAlign::BOTTOM_RIGHT, "%%");

        } else if (id(${devicename}_page).state == "C") {


          // tab



              int last_update_x_c = 955;
              int last_update_y_c = 205;

              int wifi_x_c = 870;
              int wifi_y_c = 205;

              int battery_voltage_x_c = 890;
              int battery_voltage_y_c = 205;

              // Last Updated

              it.strftime(last_update_x_c, last_update_y_c, id(font_lettering_c), TextAlign::TOP_RIGHT, "%I:%M %p", id(ntp).now());

              // WiFi Signal Strength

              if (id(${devicename}_WiFi_Signal).has_state()) {
                if (id(${devicename}_WiFi_Signal).state >= -50) {
                  //Excellent
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤨");
                  ESP_LOGI("WiFi", "Exellent");
                } else if (id(${devicename}_WiFi_Signal).state >= -60) {
                  //Good
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤥");
                  ESP_LOGI("WiFi", "Good");
                } else if (id(${devicename}_WiFi_Signal).state >= -67) {
                  //Fair
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤢");
                  ESP_LOGI("WiFi", "Fair");
                } else if (id(${devicename}_WiFi_Signal).state >= -70) {
                  //Weak
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤟");
                  ESP_LOGI("WiFi", "Weak");
                } else {
                  //Unlikely working signal
                  it.print(wifi_x_c, wifi_y_c, id(font_wifi_c), TextAlign::TOP_RIGHT, "󰤫");
                  ESP_LOGI("WiFi", "Unlikely");
                }
              }

              // Battery Voltage

              if (id(${devicename}_battery_voltage).has_state()) {
                if (id(${devicename}_battery_voltage).state >= 3.7) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁹");
                } else if (id(${devicename}_battery_voltage).state >= 3.5) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰂁");
                } else if (id(${devicename}_battery_voltage).state >= 3.3) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁿");
                } else if (id(${devicename}_battery_voltage).state >= 3.1) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁽");
                } else if (id(${devicename}_battery_voltage).state >= 3.0) {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󰁻");
                } else {
                  it.print(battery_voltage_x_c, battery_voltage_y_c, id(font_battery_c), TextAlign::TOP_RIGHT, "󱃍");
                }

              }

        }


sensor:
  - platform: wifi_signal
    name: '${devicename} WiFi Signal'
    id: '${devicename}_WiFi_Signal'
    update_interval: 60s
  - platform: uptime
    name: '${devicename} Uptime'
    update_interval: 60s
  - platform: debug
    free:
      name: '${devicename} Heap Free'
    block:
      name: '${devicename} Heap Max Block'
    loop_time:
      name: '${devicename} Loop Time'
  - id: '${devicename}_battery_voltage'
    name: '${devicename} Battery Voltage'
    platform: lilygo_t5_47
    unit_of_measurement: V
    state_class: measurement
    device_class: voltage
    update_interval: 60s
  - platform: homeassistant
    entity_id: 'sensor.${room_1_temperature_id}'
    id: '${room_1_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_1_humidity_id}'
    id: '${room_1_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_2_temperature_id}'
    id: '${room_2_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_2_humidity_id}'
    id: '${room_2_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_3_temperature_id}'
    id: '${room_3_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_3_humidity_id}'
    id: '${room_3_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_4_temperature_id}'
    id: '${room_4_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_4_humidity_id}'
    id: '${room_4_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_5_temperature_id}'
    id: '${room_5_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_5_humidity_id}'
    id: '${room_5_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_6_temperature_id}'
    id: '${room_6_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_6_humidity_id}'
    id: '${room_6_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_7_temperature_id}'
    id: '${room_7_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_7_humidity_id}'
    id: '${room_7_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_8_temperature_id}'
    id: '${room_8_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_8_humidity_id}'
    id: '${room_8_humidity_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_9_temperature_id}'
    id: '${room_9_temperature_id}'
  - platform: homeassistant
    entity_id: 'sensor.${room_9_humidity_id}'
    id: '${room_9_humidity_id}'
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_air_temp_high
    attribute: air_temp_high
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_air_temp_low
    attribute: air_temp_low
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_day_num
    attribute: day_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_month_num
    attribute: month_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_air_temp_high
    attribute: air_temp_high
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_air_temp_low
    attribute: air_temp_low
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_day_num
    attribute: day_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_month_num
    attribute: month_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_air_temp_high
    attribute: air_temp_high
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_air_temp_low
    attribute: air_temp_low
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_day_num
    attribute: day_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_month_num
    attribute: month_num
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_air_temp_high
    attribute: air_temp_high
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_air_temp_low
    attribute: air_temp_low
  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_1
    id: wf_h_fc_1_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_3
    id: wf_h_fc_3_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_5
    id: wf_h_fc_5_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_7
    id: wf_h_fc_7_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_9
    id: wf_h_fc_9_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_11
    id: wf_h_fc_11_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_13
    id: wf_h_fc_13_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_15
    id: wf_h_fc_15_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_17
    id: wf_h_fc_17_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_19
    id: wf_h_fc_19_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_21
    id: wf_h_fc_21_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_air_temp
    attribute: air_temperature
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_hour
    attribute: local_hour
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_pxl
    attribute: pixel_height
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_precip_prob
    attribute: precip_probability
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_23
    id: wf_h_fc_23_pxl
    attribute: pixel_height
    on_value:
      then:
        - logger.log: Received sensor.weatherflow_hourly_forecast_23
        - script.execute: all_data_received
text_sensor:
  - platform: debug
    device:
      name: '${devicename} Device Info'
      id: '${devicename}_device_info'
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_precip_prob_icon
    attribute: precip_probability_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_hour_icon
    attribute: local_hour_icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_day_name
    attribute: day_name
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_conditions
    attribute: conditions
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_day_name
    attribute: day_name
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_conditions
    attribute: conditions
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_day_name
    attribute: day_name
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_conditions
    attribute: conditions
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_day_name
    attribute: day_name
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_conditions
    attribute: conditions
  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_icon
    attribute: icon
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_14
    id: wf_h_fc_14_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_16
    id: wf_h_fc_16_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_18
    id: wf_h_fc_18_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_20
    id: wf_h_fc_20_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_22
    id: wf_h_fc_22_am_pm
    attribute: am_pm
  - platform: homeassistant
    entity_id: 'input_select.${devicename}_page'
    id: '${devicename}_page'
#    on_value:
#      then:
#        - component.update: '${devicename}_display'
script:
  - id: all_data_received
    then:
      - component.update: '${devicename}_display'
      - delay: 5s
      - if:
          condition:
            binary_sensor.is_on: '${devicename}_prevent_deep_sleep'
          then:
            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - script.execute: enter_sleep
  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - logger.log: 'Nighttime, entering long sleep for ${night_sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${night_sleep_time}'
          else:
            - logger.log: 'Daytime, entering short sleep for ${sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${sleep_time}'

