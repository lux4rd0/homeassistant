substitutions:
  devicename: esp12
  run_time: 5min
  sleep_time: 15min
  night_sleep_time: 6h
esphome:
  name: '${devicename}'
  platformio_options:
    build_flags:
      - '-DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768'
esp32:
  board: featheresp32
  variant: esp32
  framework:
    type: arduino
    version: 2.0.2
    source: 'https://github.com/espressif/arduino-esp32.git#2.0.2'
    platform_version: >-
      https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream
debug:
  update_interval: 60s
time:
  - platform: homeassistant
    id: ntp
logger:
  baud_rate: 0
  level: DEBUG
switch:
  - platform: restart
    name: '${devicename} Restart'
  - platform: gpio
    pin:
      number: 21
      inverted: 'yes'
    id: '${devicename}_reset_switch'
    internal: true
    name: '${devicename} Display Reset Pin'
api:
  reboot_timeout: 1min
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: '${devicename}'
    password: !secret wifi_password
  domain: .tylephony.com
  power_save_mode: none
font:
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_battery
    size: 18
    glyphs:
      - "\U000F0079"
      - "\U000F0081"
      - "\U000F007F"
      - "\U000F007D"
      - "\U000F007B"
      - "\U000F10CD"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi
    size: 18
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"
  - file: fonts/digital-7 (mono).ttf
    id: font_humidity
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
    size: 45
  - file: fonts/Open 24 Display St.ttf
    id: font_humidity_percent
    glyphs:
      - '%'
    size: 24
  - file: fonts/Open 24 Display St.ttf
    id: font_hourly_degree
    size: 50
    glyphs:
      - °
  - file: fonts/digital-7 (mono).ttf
    id: font_hourly
    size: 44
  - file: fonts/Tall Films Expanded.ttf
    id: font_am_pm
    size: 20
  - file: fonts/dripicons-weather.ttf
    id: font_icons_small
    size: 50
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/dripicons-weather.ttf
    id: font_icons_large
    size: 138
    glyphs:
      - /
      - ''''
      - a
      - k
      - R
      - A
      - E
      - D
      - '"'
      - t
      - P
      - O
      - 'y'
      - x
      - b
      - '%'
      - .
      - w
      - j
  - file: fonts/digital-7 (mono).ttf
    id: font_current
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
      - ' '
      - '-'
    size: 90
  - file: fonts/Open 24 Display St.ttf
    id: font_current_degree
    size: 90
    glyphs:
      - °
  - file: fonts/Open 24 Display St.ttf
    id: font_current_humidity_percent
    glyphs:
      - '%'
    size: 40
binary_sensor:
  - platform: homeassistant
    id: '${devicename}_prevent_deep_sleep'
    name: '${devicename} Prevent Deep Sleep'
    entity_id: 'input_boolean.${devicename}_prevent_deep_sleep'
deep_sleep:
  run_duration: '${run_time}'
  sleep_duration: '${sleep_time}'
  id: deep_sleep_control
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15
display:
  - platform: waveshare_epaper
    id: '${devicename}_display'
    cs_pin: GPIO12
    busy_pin: GPIO33
    reset_pin: GPIO21
    dc_pin: GPIO27
    model: 7.50inV2
    update_interval: never
    reset_duration: 2ms

    lambda: |-
    
      // tab
      it.printf(50, 50, id(font_hourly), TextAlign::BOTTOM_LEFT, "%.0f", id(wf_d_fc_air_air_temp_high).state);

button:
  - platform: template
    name: '${devicename} Refresh'
    icon: 'mdi:update'
    on_press:
      then:
        - component.update: '${devicename}_display'
sensor:
  - platform: wifi_signal
    name: '${devicename} WiFi Signal'
    id: '${devicename}_WiFi_Signal'
    update_interval: 60s
  - platform: uptime
    name: '${devicename} Uptime'
    update_interval: 60s
  - platform: debug
    free:
      name: '${devicename} Heap Free'
    block:
      name: '${devicename} Heap Max Block'
    loop_time:
      name: '${devicename} Loop Time'
  - platform: adc
    pin: A13
    name: '${devicename} Battery Voltage'
    id: '${devicename}_battery_voltage'
    update_interval: 60s
    attenuation: 11db
    filters:
      - lambda: return (x / 3.9) * 2 * 3.3 * 1.1;
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast
    id: wf_d_fc_air_air_temp_high
    attribute: 'air_temp_high, 1'
    internal: true
text_sensor:
  - platform: debug
    device:
      name: '${devicename} Device Info'
      id: '${devicename}_device_info'
  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_icon
    attribute: icon
    internal: true
    on_value:
      then:
        - logger.log: Received sensor.weatherflow_current_conditions
        - script.execute: all_data_received
script:
  - id: all_data_received
    then:
      - component.update: '${devicename}_display'
      - delay: 10s
      - if:
          condition:
            binary_sensor.is_on: '${devicename}_prevent_deep_sleep'
          then:
            - logger.log: 'Skipping sleep, per ${devicename}_prevent_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - script.execute: enter_sleep
  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - logger.log: 'Nighttime, entering long sleep for ${night_sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${night_sleep_time}'
          else:
            - logger.log: 'Daytime, entering short sleep for ${sleep_time}'
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: '${sleep_time}'
