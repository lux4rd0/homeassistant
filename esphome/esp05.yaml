substitutions:
  devicename: esp05
  run_time: 20min
  sleep_time: 1min
  night_sleep_time: 7h
esphome:
  name: '${devicename}'
  platformio_options:
    build_flags:
      - '-DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768'
esp32:
  board: esp32dev
  variant: esp32
  framework:
    type: arduino
    version: 2.0.2
    source: 'https://github.com/espressif/arduino-esp32.git#2.0.2'
    platform_version: >-
      https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream
time:
  - platform: homeassistant
    id: esptime
logger:
  baud_rate: 0
switch:
  - platform: restart
    name: '${devicename} Restart'
api: null
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: '${devicename}'
    password: !secret wifi_password
  domain: .tylephony.com
  power_save_mode: none
font:
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_icons_large
    size: 230
    glyphs:
      - "\U000F0590"
      - "\U000F0591"
      - "\U000F0594"
      - "\U000F0595"
      - "\U000F0596"
      - "\U000F0597"
      - "\U000F0598"
      - "\U000F0599"
      - "\U000F059D"
      - "\U000F067E"
      - "\U000F0F31"
      - "\U000F0F33"
      - "\U000F0F35"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_icons_small
    size: 130
    glyphs:
      - "\U000F0590"
      - "\U000F0591"
      - "\U000F0594"
      - "\U000F0595"
      - "\U000F0596"
      - "\U000F0597"
      - "\U000F0598"
      - "\U000F0599"
      - "\U000F059D"
      - "\U000F067E"
      - "\U000F0F31"
      - "\U000F0F33"
      - "\U000F0F35"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_battery
    size: 18
    glyphs:
      - "\U000F0079"
      - "\U000F0081"
      - "\U000F007F"
      - "\U000F007D"
      - "\U000F007B"
      - "\U000F10CD"
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi
    size: 18
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"
  - file: fonts/Tall Films Expanded.ttf
    id: font_room_name
    size: 34
  - file: fonts/Google Sans Medium.ttf
    id: font_last_updated
    size: 12
  - file: fonts/Courier Prime Sans.ttf
    id: font_hi_lo
    glyphs:
      - h
      - i
      - l
      - o
    size: 30
  - file: fonts/digital-7 (mono).ttf
    id: font_humidity
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '%'
    size: 45
  - file: fonts/Open 24 Display St.ttf
    id: font_humidity_percent
    glyphs:
      - '%'
    size: 24
  - file: fonts/digital-7 (mono).ttf
    id: font_temperature
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '-'
    size: 120
  - file: fonts/Open 24 Display St.ttf
    id: font_temperature_degree
    size: 100
    glyphs:
      - °
  - file: fonts/digital-7 (mono).ttf
    id: font_hi_temperature
    size: 30
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - '-'
  - file: fonts/digital-7 (mono).ttf
    id: font_lo_temperature
    size: 24
    glyphs:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
  - file: fonts/digital-7 (mono).ttf
    id: font_current_temperature
    size: 200
    glyphs:
      - °
  - file: fonts/Open 24 Display St.ttf
    id: font_hourly_degree
    size: 50
    glyphs:
      - °
  - file: fonts/Open 24 Display St.ttf
    id: font_hourly_percent
    size: 20
    glyphs:
      - '%'
  - file: fonts/Open 24 Display St.ttf
    id: font_hi_lo_degree
    size: 70
  - file: fonts/digital-7 (mono).ttf
    id: font_hourly
    size: 44
  - file: fonts/Tall Films Expanded.ttf
    id: font_am_pm
    size: 20
spi:
  clk_pin: 13
  mosi_pin: 14
display:
  - platform: waveshare_epaper
    id: '${devicename}_display'
    cs_pin: 33
    dc_pin: 27
    busy_pin: 25
    reset_pin: 26
    model: 7.50inV2
    update_interval: 60s
    reset_duration: 2ms


    lambda: |-

            int x, y, c;
            ESP_LOGI("display", "Updating..");

            // Print time in HH:MM format
            it.strftime(0, 482, id(font_last_updated), TextAlign::BOTTOM_LEFT, "%I:%M %p", id(esptime).now());

            #define room_y_pad 163

            #define room_name_x_center 205
            #define room_name_x_pad 140
            #define room_name_y - 2

            #define room_temp_x_center 205
            #define room_temp_x_pad 140
            #define room_temp_y 25
            #define room_temp_y_pad 60

            #define room_temp_degree_x_center 268
            #define room_temp_degree_x_pad 140
            #define room_temp_degree_y 1
            #define room_temp_degree_y_pad 60

            #define room_humidity_x_center 205
            #define room_humidity_x_pad 140
            #define room_humidity_y 120
            #define room_humidity_y_pad 60

            #define room_humidity_percent_x_center 234
            #define room_humidity_percent_x_pad 140
            #define room_humidity_percent_y 115
            #define room_humidity_percent_y_pad 60

            it.print(room_name_x_center - room_name_x_pad, room_name_y, id(font_room_name), TextAlign::TOP_CENTER, "Main Bedroom");
            it.print(room_name_x_center, room_name_y, id(font_room_name), TextAlign::TOP_CENTER, "Bedroom 1");
            it.print(room_name_x_center + room_name_x_pad, room_name_y, id(font_room_name), TextAlign::TOP_CENTER, "Bedroom 2");

            it.printf(room_temp_x_center - room_temp_x_pad, room_temp_y, id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(bedroom_dave_bathroom_humidity_temperature).state);
            it.printf(room_temp_x_center, room_temp_y, id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(bedroom_red_bathroom_humidity_temperature).state);
            it.printf(room_temp_x_center + room_temp_x_pad, room_temp_y, id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(hallway_bathroom_motion_temperature).state);

            it.printf(room_temp_degree_x_center - room_temp_degree_x_pad, room_temp_degree_y, id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center, room_temp_degree_y, id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center + room_temp_degree_x_pad, room_temp_degree_y, id(font_temperature_degree), TextAlign::TOP_CENTER, "°");

            it.printf(room_humidity_x_center - room_humidity_x_pad, room_humidity_y, id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(bedroom_dave_bathroom_humidity_humidity).state);
            it.printf(room_humidity_x_center, room_humidity_y, id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(bedroom_red_bathroom_humidity_humidity).state);
            it.printf(room_humidity_x_center + room_humidity_x_pad, room_humidity_y, id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(hallway_bathroom_humidity_humidity).state);

            it.printf(room_humidity_percent_x_center - room_humidity_percent_x_pad, room_humidity_percent_y, id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center, room_humidity_percent_y, id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center + room_humidity_percent_x_pad, room_humidity_percent_y, id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");

            it.line(0, 159, 425, 159);

            it.print(room_name_x_center - room_name_x_pad, room_name_y + (room_y_pad * 1), id(font_room_name), TextAlign::TOP_CENTER, "Family Room");
            it.print(room_name_x_center, room_name_y + (room_y_pad * 1), id(font_room_name), TextAlign::TOP_CENTER, "Sunroom");
            it.print(room_name_x_center + room_name_x_pad, room_name_y + (room_y_pad * 1), id(font_room_name), TextAlign::TOP_CENTER, "Loft");

            it.printf(room_temp_x_center - room_temp_x_pad, room_temp_y + (room_y_pad * 1), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(esp01_temperature).state);
            it.printf(room_temp_x_center, room_temp_y + (room_y_pad * 1), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(esp08_temperature).state);
            it.printf(room_temp_x_center + room_temp_x_pad, room_temp_y + (room_y_pad * 1), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(esp03_temperature).state);

            it.printf(room_temp_degree_x_center - room_temp_degree_x_pad, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center + room_temp_degree_x_pad, room_temp_degree_y + (room_y_pad * 1), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");

            it.printf(room_humidity_x_center - room_humidity_x_pad, room_humidity_y + (room_y_pad * 1), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(esp01_humidity).state);
            it.printf(room_humidity_x_center, room_humidity_y + (room_y_pad * 1), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(esp08_humidity).state);
            it.printf(room_humidity_x_center + room_humidity_x_pad, room_humidity_y + (room_y_pad * 1), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(esp03_humidity).state);

            it.printf(room_humidity_percent_x_center - room_humidity_percent_x_pad, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center + room_humidity_percent_x_pad, room_humidity_percent_y + (room_y_pad * 1), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");

            it.line(0, 323, 425, 323);

            it.print(room_name_x_center - room_name_x_pad, room_name_y + (room_y_pad * 2), id(font_room_name), TextAlign::TOP_CENTER, "Kitchen");
            it.print(room_name_x_center, room_name_y + (room_y_pad * 2), id(font_room_name), TextAlign::TOP_CENTER, "Barn");
            it.print(room_name_x_center + room_name_x_pad, room_name_y + (room_y_pad * 2), id(font_room_name), TextAlign::TOP_CENTER, "She Shed");

            it.printf(room_temp_x_center - room_temp_x_pad, room_temp_y + (room_y_pad * 2), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(tyle_1st_floor_thermostat_temperature).state);
            it.printf(room_temp_x_center, room_temp_y + (room_y_pad * 2), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(tyle_2nd_floor_thermostat_temperature).state);
            it.printf(room_temp_x_center + room_temp_x_pad, room_temp_y + (room_y_pad * 2), id(font_temperature), TextAlign::TOP_CENTER, "%.0f", id(esp06_temperature).state);

            it.printf(room_temp_degree_x_center - room_temp_degree_x_pad, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");
            it.printf(room_temp_degree_x_center + room_temp_degree_x_pad, room_temp_degree_y + (room_y_pad * 2), id(font_temperature_degree), TextAlign::TOP_CENTER, "°");

            it.printf(room_humidity_x_center - room_humidity_x_pad, room_humidity_y + (room_y_pad * 2), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(tyle_1st_floor_thermostat_humidity).state);
            it.printf(room_humidity_x_center, room_humidity_y + (room_y_pad * 2), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(tyle_2nd_floor_thermostat_humidity).state);
            it.printf(room_humidity_x_center + room_humidity_x_pad, room_humidity_y + (room_y_pad * 2), id(font_humidity), TextAlign::TOP_CENTER, "%.0f", id(esp06_humidity).state);

            it.printf(room_humidity_percent_x_center - room_humidity_percent_x_pad, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");
            it.printf(room_humidity_percent_x_center + room_humidity_percent_x_pad, room_humidity_percent_y + (room_y_pad * 2), id(font_humidity_percent), TextAlign::TOP_CENTER, "%%");

            it.line(425, 0, 425, 480);

            // WiFi Signal Strength
            if(id(${devicename}_WiFi_Signal).has_state()) {
              x = 0, y = 468;
              if (id(${devicename}_WiFi_Signal).state >= -50) {
                        //Excellent
                        it.print(x, y, id(font_wifi), TextAlign::BOTTOM_LEFT, "󰤨");
                        ESP_LOGI("WiFi", "Exellent");
              } else if (id(${devicename}_WiFi_Signal).state  >= -60) {
                        //Good
                        it.print(x, y, id(font_wifi), TextAlign::BOTTOM_LEFT, "󰤥");
                        ESP_LOGI("WiFi", "Good");
              } else if (id(${devicename}_WiFi_Signal).state  >= -67) {
                        //Fair
                        it.print(x, y, id(font_wifi), TextAlign::BOTTOM_LEFT, "󰤢");
                        ESP_LOGI("WiFi", "Fair");
              } else if (id(${devicename}_WiFi_Signal).state  >= -70) {
                        //Weak
                        it.print(x, y, id(font_wifi), TextAlign::BOTTOM_LEFT, "󰤟");
                        ESP_LOGI("WiFi", "Weak");
              } else {
                        //Unlikely working signal
                        it.print(x, y, id(font_wifi), TextAlign::BOTTOM_LEFT, "󰤫");
                        ESP_LOGI("WiFi", "Unlikely");
              }
            }

            // Hourly Details Only If There's a chance of rain in the next 12 hours

            if ((id(wf_h_fc_0_precip_probability).state > 1) || (id(wf_h_fc_1_precip_probability).state > 1) || (id(wf_h_fc_2_precip_probability).state > 1) ||
              (id(wf_h_fc_3_precip_probability).state > 1) || (id(wf_h_fc_4_precip_probability).state > 1) || (id(wf_h_fc_5_precip_probability).state > 1) ||
              (id(wf_h_fc_6_precip_probability).state > 1) || (id(wf_h_fc_7_precip_probability).state > 1) || (id(wf_h_fc_8_precip_probability).state > 1) ||
              (id(wf_h_fc_9_precip_probability).state > 1) || (id(wf_h_fc_10_precip_probability).state > 1) || (id(wf_h_fc_11_precip_probability).state > 1)) {

              ESP_LOGI("precip_probability", "greater than 1");

              #define hourly_pad_x 14
              #define hourly_pad_y 38

              #define hourly_hour_x 652
              #define hourly_hour_y 22
              #define hourly_am_pm_x 667
              #define hourly_am_y 19
              #define hourly_pm_y 32
              #define hourly_am_pm_y 20

              #define hourly_temperature_x 724
              #define hourly_temperature_y 22
              #define hourly_degree_x 738
              #define hourly_degree_y 42

              #define hourly_probability_x 786
              #define hourly_probability_y 22
              #define hourly_probability_percent_x 797
              #define hourly_probability_percent_y 19

              it.printf(hourly_probability_x, hourly_probability_y, id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y, id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y, id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y, id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y, id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_0_local_hour_twelvehour).state);

              if (id(wf_h_fc_0_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y, id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_0_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y, id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_0_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 1), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_1_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 1), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 1), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_1_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 1), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 1), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_1_local_hour_twelvehour).state);

              if (id(wf_h_fc_1_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 1), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_1_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 1), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_1_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 2), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 2), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 2), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 2), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 2), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_2_local_hour_twelvehour).state);

              if (id(wf_h_fc_2_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 2), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_2_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 2), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_2_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 3), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_3_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 3), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 3), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_3_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 3), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 3), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_3_local_hour_twelvehour).state);

              if (id(wf_h_fc_3_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 3), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_3_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 3), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_3_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 4), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 4), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 4), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 4), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 4), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_4_local_hour_twelvehour).state);

              if (id(wf_h_fc_4_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 4), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_4_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 4), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_4_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 5), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_5_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 5), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 5), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_5_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 5), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 5), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_5_local_hour_twelvehour).state);

              if (id(wf_h_fc_5_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 5), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_5_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 5), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_5_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 6), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 6), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 6), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 6), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 6), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_6_local_hour_twelvehour).state);

              if (id(wf_h_fc_6_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 6), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_6_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 6), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_6_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 7), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_7_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 7), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 7), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_7_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 7), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 7), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_7_local_hour_twelvehour).state);

              if (id(wf_h_fc_7_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 7), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_7_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 7), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_7_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 8), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 8), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 8), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 8), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 8), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_8_local_hour_twelvehour).state);

              if (id(wf_h_fc_8_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 8), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_8_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 8), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_8_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 9), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_9_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 9), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 9), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_9_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 9), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 9), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_9_local_hour_twelvehour).state);

              if (id(wf_h_fc_9_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 9), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_9_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 9), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_9_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 10), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 10), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 10), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 10), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 10), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_10_local_hour_twelvehour).state);

              if (id(wf_h_fc_10_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 10), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_10_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 10), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_10_local_hour_twelvehour_am_pm).state.c_str());
              }

              it.printf(hourly_probability_x, hourly_probability_y + (hourly_pad_y * 11), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_11_precip_probability).state);
              it.printf(hourly_probability_percent_x, hourly_probability_percent_y + (hourly_pad_y * 11), id(font_hourly_percent), TextAlign::BOTTOM_RIGHT, "%%");
              it.printf(hourly_temperature_x, hourly_temperature_y + (hourly_pad_y * 11), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_11_air_temperature).state);
              it.printf(hourly_degree_x, hourly_degree_y + (hourly_pad_y * 11), id(font_hourly_degree), TextAlign::BOTTOM_RIGHT, "°");
              it.printf(hourly_hour_x, hourly_hour_y + (hourly_pad_y * 11), id(font_hourly), TextAlign::BOTTOM_RIGHT, "%.0f", id(wf_h_fc_11_local_hour_twelvehour).state);

              if (id(wf_h_fc_11_local_hour_twelvehour_am_pm).state == "AM") {
                it.printf(hourly_am_pm_x, hourly_am_y + (hourly_pad_y * 11), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_11_local_hour_twelvehour_am_pm).state.c_str());
              } else {
                it.printf(hourly_am_pm_x, hourly_pm_y + (hourly_pad_y * 11), id(font_am_pm), TextAlign::BOTTOM_RIGHT, "%s", id(wf_h_fc_11_local_hour_twelvehour_am_pm).state.c_str());
              }

            }    






button:
  - platform: template
    name: '${devicename} Refresh'
    icon: 'mdi:update'
    on_press:
      then:
        - component.update: '${devicename}_display'

sensor:
  - platform: wifi_signal
    name: ${devicename} WiFi Signal
    id: ${devicename}_WiFi_Signal
    update_interval: 60s
  - platform: uptime
    name: ${devicename} Uptime
    update_interval: 60s
  - platform: homeassistant
    entity_id: sensor.bedroom_dave_bathroom_humidity_humidity
    id: bedroom_dave_bathroom_humidity_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.bedroom_red_bathroom_humidity_humidity
    id: bedroom_red_bathroom_humidity_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.hallway_bathroom_humidity_humidity
    id: hallway_bathroom_humidity_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.outside_humidity_humidity
    id: outside_humidity_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.tyle_1st_floor_thermostat_humidity
    id: tyle_1st_floor_thermostat_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.tyle_2nd_floor_thermostat_humidity
    id: tyle_2nd_floor_thermostat_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp01_humidity
    id: esp01_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp03_humidity
    id: esp03_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp06_humidity
    id: esp06_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp08_humidity
    id: esp08_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.bedroom_dave_bathroom_humidity_temperature
    id: bedroom_dave_bathroom_humidity_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.bedroom_red_bathroom_humidity_temperature
    id: bedroom_red_bathroom_humidity_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.hallway_bathroom_motion_temperature
    id: hallway_bathroom_motion_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.outside_humidity_temperature
    id: outside_humidity_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.tyle_1st_floor_thermostat_temperature
    id: tyle_1st_floor_thermostat_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.tyle_2nd_floor_thermostat_temperature
    id: tyle_2nd_floor_thermostat_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp01_temperature
    id: esp01_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp03_temperature
    id: esp03_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp06_temperature
    id: esp06_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.esp08_temperature
    id: esp08_temperature
    internal: true
  - platform: homeassistant
    entity_id: sensor.garage_door_tilt_temperature
    id: garage_door_tilt_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_day_num
    attribute: day_num
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_month_num
    attribute: month_num
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_air_temp_high
    attribute: air_temp_high
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_air_temp_low
    attribute: air_temp_low
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_precip_probability
    attribute: precip_probability
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_day_num
    attribute: day_num
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_month_num
    attribute: month_num
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_air_temp_high
    attribute: air_temp_high
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_air_temp_low
    attribute: air_temp_low
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_precip_probability
    attribute: precip_probability
    internal: true



  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_day_num
    attribute: day_num
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_month_num
    attribute: month_num
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_air_temp_high
    attribute: air_temp_high
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_air_temp_low
    attribute: air_temp_low
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_precip_probability
    attribute: precip_probability
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_day_num
    attribute: day_num
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_month_num
    attribute: month_num
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_air_temp_high
    attribute: air_temp_high
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_air_temp_low
    attribute: air_temp_low
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_3
    id: wf_d_fc_3_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_relative_humidity
    attribute: relative_humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_local_hour
    attribute: local_hour
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_0
    id: wf_h_fc_0_precip_probability
    attribute: precip_probability
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_1
    id: wf_h_fc_1_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_1
    id: wf_h_fc_1_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_1
    id: wf_h_fc_1_precip_probability
    attribute: precip_probability
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_2
    id: wf_h_fc_2_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_3
    id: wf_h_fc_3_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_3
    id: wf_h_fc_3_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_3
    id: wf_h_fc_3_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_4
    id: wf_h_fc_4_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_5
    id: wf_h_fc_5_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_5
    id: wf_h_fc_5_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_5
    id: wf_h_fc_5_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_6
    id: wf_h_fc_6_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_7
    id: wf_h_fc_7_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_7
    id: wf_h_fc_7_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_7
    id: wf_h_fc_7_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_8
    id: wf_h_fc_8_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_9
    id: wf_h_fc_9_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_9
    id: wf_h_fc_9_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_9
    id: wf_h_fc_9_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_10
    id: wf_h_fc_10_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_11
    id: wf_h_fc_11_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_11
    id: wf_h_fc_11_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_11
    id: wf_h_fc_11_precip_probability
    attribute: precip_probability
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_local_hour
    attribute: local_hour
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_air_temperature
    attribute: air_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_hourly_forecast_12
    id: wf_h_fc_12_precip_probability
    attribute: precip_probability
    internal: true

  - platform: template
    id: wf_h_fc_0_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_0_local_hour).state) >= 13) {
        return ((id(wf_h_fc_0_local_hour).state) - 12);
      } else if ((id(wf_h_fc_0_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_0_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_1_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_1_local_hour).state) >= 13) {
        return ((id(wf_h_fc_1_local_hour).state) - 12);
      } else if ((id(wf_h_fc_1_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_1_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_2_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_2_local_hour).state) >= 13) {
        return ((id(wf_h_fc_2_local_hour).state) - 12);
      } else if ((id(wf_h_fc_2_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_2_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_3_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_3_local_hour).state) >= 13) {
        return ((id(wf_h_fc_3_local_hour).state) - 12);
      } else if ((id(wf_h_fc_3_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_3_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_4_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_4_local_hour).state) >= 13) {
        return ((id(wf_h_fc_4_local_hour).state) - 12);
      } else if ((id(wf_h_fc_4_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_4_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_5_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_5_local_hour).state) >= 13) {
        return ((id(wf_h_fc_5_local_hour).state) - 12);
      } else if ((id(wf_h_fc_5_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_5_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_6_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_6_local_hour).state) >= 13) {
        return ((id(wf_h_fc_6_local_hour).state) - 12);
      } else if ((id(wf_h_fc_6_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_6_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_7_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_7_local_hour).state) >= 13) {
        return ((id(wf_h_fc_7_local_hour).state) - 12);
      } else if ((id(wf_h_fc_7_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_7_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_8_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_8_local_hour).state) >= 13) {
        return ((id(wf_h_fc_8_local_hour).state) - 12);
      } else if ((id(wf_h_fc_8_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_8_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_9_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_9_local_hour).state) >= 13) {
        return ((id(wf_h_fc_9_local_hour).state) - 12);
      } else if ((id(wf_h_fc_9_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_9_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_10_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_10_local_hour).state) >= 13) {
        return ((id(wf_h_fc_10_local_hour).state) - 12);
      } else if ((id(wf_h_fc_10_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_10_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_11_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_11_local_hour).state) >= 13) {
        return ((id(wf_h_fc_11_local_hour).state) - 12);
      } else if ((id(wf_h_fc_11_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_11_local_hour).state);
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_12_local_hour_twelvehour
    internal: true
    lambda: |-
      if ((id(wf_h_fc_12_local_hour).state) >= 13) {
        return ((id(wf_h_fc_12_local_hour).state) - 12);
      } else if ((id(wf_h_fc_12_local_hour).state) < 1) {
        return 12;
      } else {
        return (id(wf_h_fc_12_local_hour).state);
      }
    update_interval: 15s
text_sensor:

  - platform: homeassistant
    entity_id: sensor.weatherflow_precipitation_intensity
    id: wf_precipitation_intensity
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_conditions
    attribute: conditions
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_icon
    attribute: icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_precip_icon
    attribute: precip_icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_0
    id: wf_d_fc_0_precip_type
    attribute: precip_type
    internal: true


  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_conditions
    attribute: conditions
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_icon
    attribute: icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_precip_icon
    attribute: precip_icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_1
    id: wf_d_fc_1_precip_type
    attribute: precip_type
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_conditions
    attribute: conditions
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_icon
    attribute: icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_precip_icon
    attribute: precip_icon
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_daily_forecast_2
    id: wf_d_fc_2_precip_type
    attribute: precip_type
    internal: true

  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_conditions
    attribute: conditions
    internal: true

  - platform: template
    id: wf_h_fc_0_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_0_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_1_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_1_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_2_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_2_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_3_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_3_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_4_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_4_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_5_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_5_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_6_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_6_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_7_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_7_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_8_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_8_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_9_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_9_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s
    
  - platform: template
    id: wf_h_fc_10_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_10_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s  

  - platform: template
    id: wf_h_fc_11_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_11_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: template
    id: wf_h_fc_12_local_hour_twelvehour_am_pm
    internal: true
    lambda: |-
      if ((id(wf_h_fc_12_local_hour).state) >= 12) {
        return {"PM"};
      } else {
        return {"AM"};
      }
    update_interval: 15s

  - platform: homeassistant
    entity_id: sensor.weatherflow_current_conditions
    id: wf_current_conditions_icon
    attribute: icon
    internal: true



